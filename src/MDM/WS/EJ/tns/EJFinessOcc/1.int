ROUTINE MDM.WS.EJ.tns.EJFinessOcc.1 [Type=INT,Generated]
 ;MDM.WS.EJ.tns.EJFinessOcc.1
 ;Generated for class MDM.WS.EJ.tns.EJFinessOcc.  Do NOT edit. 09/09/2020 01:32:37PM
 ;;65352F56;MDM.WS.EJ.tns.EJFinessOcc
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) public {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..APE
 s proporef=..goldenRecord
 s proporef=..jurStatus
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/3
 s proporef=..APE
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..goldenRecord
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..jurStatus
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
   Quit sc }
%BuildDeferredIndices(lockFlag=0,journalFlag=1) public {
	return $$Error^%apiOBJ(5758,"%Storage.Persistent::%BuildDeferredIndices") }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag="",pStartID="",pEndID="",pIgnoreIndexList="") public {
	If (pIndexList="")||(($listlength(pIndexList)=1)&&($listget(pIndexList,1)="")) { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(pIndexList)) }
%BuildIndicesSegment(pStartID,pEndID,pIndexHandle=0,pLockFlag=1,pFirstRange=0,pJob="") public {
	QUIT 1 }
%CheckConstraints(pID,pConstraintList="",pCheckDisabled=0,pErrorInfo) public {
	if (''..%OnDetermineClass($select(pID="":"",1:$listbuild(pID_"")),.tMSTC)) && (tMSTC '= $classname()) { quit $classmethod(tMSTC,"%CheckConstraints",pID,pConstraintList) } else { quit 1 } }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM MDM_WS_EJ_tns.EJFinessOcc)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE, tID
	 
	 ;---&sql(open ext)
	try { if $g(%ext0203)'="" { s SQLCODE=-101 } else { s %ext0203=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEe7qZ7lGlLsAqzEg8YFCLkI8wif","%New") if '$isobject(%ext0203) s %ext0203=$$%0dsqlA() } } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEe7qZ7lGlLsAqzEg8YFCLkI8wif")||($ze["<ZSQLU>") { s %ext0203=$$%0dsqlA() } else { throw } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext0203))'=1 { s SQLCODE=-102 } else { do %ext0203.FET() if SQLCODE=0 { } }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext0203)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext0203 }
	}
	quit tStatusAll }
 q
%0dsqlA()	n %xxsql
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM MDM_WS_EJ_tns . EJFinessOcc"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%systemInclude")=""
	s %xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PTools")="-1:0:0::0:1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","MDM.WS.EJ.tns",0,"",),",0,ext,","MDM.WS.EJ.tns.EJFinessOcc.CLS",1)
%ComposeOid(id) public {
	set tCLASSNAME = $listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),1)
	if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","MDM.WS.EJ.tns.EJFinessOcc")) }
	set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),*-1)
	set:tClass'["." tClass="User."_tClass
	quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%ConstructCloneInit(object,deep=0,cloned,location) public {
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(..APE)=1 Set r%APE=r%APE.%ConstructClone(1,.cloned),i%APE=""
		If $isobject(..goldenRecord)=1 Set r%goldenRecord=r%goldenRecord.%ConstructClone(1,.cloned),i%goldenRecord=""
		If $isobject(..jurStatus)=1 Set r%jurStatus=r%jurStatus.%ConstructClone(1,.cloned),i%jurStatus=""
	}
	Quit 1 }
%DeleteData(id,concurrency) public {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^MDM.WS.EJ.tns.EJFinessOccD(id))) {
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"%1","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
		}
		Kill ^MDM.WS.EJ.tns.EJFinessOccD(id)
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Exists(oid="") public {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) public {
	Try { set tExists = $s(id="":0,$d(^MDM.WS.EJ.tns.EJFinessOccD(id)):1,1:0) } catch tException { set tExists = 0 if '(tException.%IsA("%Exception.SystemException")) { throw tException } elseif tException.Name'="<SUBSCRIPT>" { ZT $ZE } } quit tExists }
%FileIndices(id,pIndexHandle=0) public {
	Quit 1 }
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set lock=0
			if (useTransactions) tstart
			set id=$i(^MDM.WS.EJ.tns.EJFinessOccD)
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^MDM.WS.EJ.tns.EJFinessOccD(id)=data
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%KillExtentData(killstreams=0)
	Set $sequence(^MDM.WS.EJ.tns.EJFinessOccD)=""
	If killstreams Kill ^MDM.WS.EJ.tns.EJFinessOccS
	Kill ^MDM.WS.EJ.tns.EJFinessOccD
	Quit 1
%LoadData(id) public {
	New %s1
	set $ZTrap="CatchError",locked=0,userze=$ze,$ze=""
	If i%%Concurrency=4 {
		Lock +(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>1 {
		Lock +(^MDM.WS.EJ.tns.EJFinessOccD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5804,$classname())
		set locked = 1
	}
	If $d(^MDM.WS.EJ.tns.EJFinessOccD(id),%s1)#2 {
		If i%%Concurrency=2 { Lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)#"SIE") }
		S i%isDeleted=$lg(%s1,2),i%ts=$lg(%s1,3),i%initSystemRecordId=$lg(%s1,4),i%dictClassName=$lg(%s1,5),i%APE=$lg(%s1,6),i%buildNum=$lg(%s1,7),i%changeDateSIREN=$lg(%s1,8),i%changeReasonSIREN=$lg(%s1,9),i%codeFINESSEJ=$lg(%s1,10)
		Set iscpos=$l($li(%s1,1,10))+1,isctmp=$li($e(%s1,iscpos,*),1,10),i%codeSIREN=$lg(isctmp),i%countryCode=$lg(isctmp,2),i%countryName=$lg(isctmp,3),i%creationType=$lg(isctmp,4),i%deptCode=$lg(isctmp,5),i%deptName=$lg(isctmp,6),i%email=$lg(isctmp,7),i%fax=$lg(isctmp,8),i%geoInfo=$lg(isctmp,9),i%goldenRecord=$lg(isctmp,10)
		Set iscpos=iscpos+$l(isctmp),isctmp=$li($e(%s1,iscpos,*),1,10),i%houseNum=$lg(isctmp),i%mdmId=$lg(isctmp,2),i%info=$lg(isctmp,3),i%jurStatus=$lg(isctmp,4),i%liquidateDate=$lg(isctmp,5),i%liquidateType=$lg(isctmp,6),i%locationCode=$lg(isctmp,7),i%locationName=$lg(isctmp,8),i%locationShortName=$lg(isctmp,9),i%mentionDistribution=$lg(isctmp,10)
		Set iscpos=iscpos+$l(isctmp),isctmp=$li($e(%s1,iscpos,*),1,10),i%orgCategoryCode=$lg(isctmp),i%orgCategoryName=$lg(isctmp,2),i%orgCategoryShortName=$lg(isctmp,3),i%orgCreateDate=$lg(isctmp,4),i%orgFullName=$lg(isctmp,5),i%orgName=$lg(isctmp,6),i%orgNameAdditional=$lg(isctmp,7),i%orgPostCode=$lg(isctmp,8),i%orgUpdateDate=$lg(isctmp,9),i%phon2=$lg(isctmp,10)
		S isctmp=$e(%s1,iscpos+$l(isctmp),*),i%phone=$lg(isctmp),i%postalCode=$lg(isctmp,2),i%streetName=$lg(isctmp,3),i%streetType=$lg(isctmp,4),i%streetTypeName=$lg(isctmp,5),i%typologie=$lg(isctmp,6)
		s:$ze="" $ze=userze
		Quit 1
	} Else {
		If i%%Concurrency=2 { Lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)#"SIE") }
		do init
		set sc = $$Error^%apiOBJ(5809,$classname(),id) goto CatchError
	}
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	s:$ze="" $ze=userze
	return sc
init	Set i%APE="",i%buildNum="",i%changeDateSIREN="",i%changeReasonSIREN="",i%codeFINESSEJ="",i%codeSIREN="",i%countryCode="",i%countryName="",i%creationType="",i%deptCode="",i%deptName="",i%dictClassName="",i%email="",i%fax="",i%geoInfo="",i%goldenRecord="",i%houseNum="",i%info="",i%initSystemRecordId="",i%isDeleted="",i%jurStatus="",i%liquidateDate="",i%liquidateType="",i%locationCode="",i%locationName="",i%locationShortName="",i%mdmId="",i%mentionDistribution="",i%orgCategoryCode="",i%orgCategoryName=""
	Set i%orgCategoryShortName="",i%orgCreateDate="",i%orgFullName="",i%orgName="",i%orgNameAdditional="",i%orgPostCode="",i%orgUpdateDate="",i%phon2="",i%phone="",i%postalCode="",i%streetName="",i%streetType="",i%streetTypeName="",i%ts="",i%typologie=""
	quit }
%LoadDataFromMemory(id,objstate,obj) public {
	New %s1
	If $d(objstate(id)) {
		Set %s1=$g(objstate(id))
		S i%isDeleted=$lg(%s1,2),i%ts=$lg(%s1,3),i%initSystemRecordId=$lg(%s1,4),i%dictClassName=$lg(%s1,5),i%APE=$lg(%s1,6),i%buildNum=$lg(%s1,7),i%changeDateSIREN=$lg(%s1,8),i%changeReasonSIREN=$lg(%s1,9),i%codeFINESSEJ=$lg(%s1,10)
		Set iscpos=$l($li(%s1,1,10))+1,isctmp=$li($e(%s1,iscpos,*),1,10),i%codeSIREN=$lg(isctmp),i%countryCode=$lg(isctmp,2),i%countryName=$lg(isctmp,3),i%creationType=$lg(isctmp,4),i%deptCode=$lg(isctmp,5),i%deptName=$lg(isctmp,6),i%email=$lg(isctmp,7),i%fax=$lg(isctmp,8),i%geoInfo=$lg(isctmp,9),i%goldenRecord=$lg(isctmp,10)
		Set iscpos=iscpos+$l(isctmp),isctmp=$li($e(%s1,iscpos,*),1,10),i%houseNum=$lg(isctmp),i%mdmId=$lg(isctmp,2),i%info=$lg(isctmp,3),i%jurStatus=$lg(isctmp,4),i%liquidateDate=$lg(isctmp,5),i%liquidateType=$lg(isctmp,6),i%locationCode=$lg(isctmp,7),i%locationName=$lg(isctmp,8),i%locationShortName=$lg(isctmp,9),i%mentionDistribution=$lg(isctmp,10)
		Set iscpos=iscpos+$l(isctmp),isctmp=$li($e(%s1,iscpos,*),1,10),i%orgCategoryCode=$lg(isctmp),i%orgCategoryName=$lg(isctmp,2),i%orgCategoryShortName=$lg(isctmp,3),i%orgCreateDate=$lg(isctmp,4),i%orgFullName=$lg(isctmp,5),i%orgName=$lg(isctmp,6),i%orgNameAdditional=$lg(isctmp,7),i%orgPostCode=$lg(isctmp,8),i%orgUpdateDate=$lg(isctmp,9),i%phon2=$lg(isctmp,10)
		S isctmp=$e(%s1,iscpos+$l(isctmp),*),i%phone=$lg(isctmp),i%postalCode=$lg(isctmp,2),i%streetName=$lg(isctmp,3),i%streetType=$lg(isctmp,4),i%streetTypeName=$lg(isctmp,5),i%typologie=$lg(isctmp,6)
		Quit 1
	} Else {
		Set i%APE="",i%buildNum="",i%changeDateSIREN="",i%changeReasonSIREN="",i%codeFINESSEJ="",i%codeSIREN="",i%countryCode="",i%countryName="",i%creationType="",i%deptCode="",i%deptName="",i%dictClassName="",i%email="",i%fax="",i%geoInfo="",i%goldenRecord="",i%houseNum="",i%info="",i%initSystemRecordId="",i%isDeleted="",i%jurStatus="",i%liquidateDate="",i%liquidateType="",i%locationCode="",i%locationName="",i%locationShortName="",i%mdmId="",i%mentionDistribution="",i%orgCategoryCode="",i%orgCategoryName=""
		Set i%orgCategoryShortName="",i%orgCreateDate="",i%orgFullName="",i%orgName="",i%orgNameAdditional="",i%orgPostCode="",i%orgUpdateDate="",i%phon2="",i%phone="",i%postalCode="",i%streetName="",i%streetType="",i%streetTypeName="",i%ts="",i%typologie=""
		Quit $$Error^%apiOBJ(5809,$classname(),id)
	} }
%LoadInit(oid="",concurrency="",reset=0) public {
	Set:concurrency'="" i%%Concurrency=concurrency
	If reset {
		Kill i%APE,i%goldenRecord,i%jurStatus
	}
	Set r%APE="",r%goldenRecord="",r%jurStatus=""
	If 'reset { Set gbl=..#DATALOCATIONGLOBAL If gbl="" { Set oref=$zobjoid("",$listget(oid)),sfn=$zu(40,0,41) } Else { Set oref=$zobjoid("",$listget(oid),@gbl,.sfn) } Set $zobjoid("",$listget(oid),,sfn)=$this,i%"%%OID"=oid }
	Quit 1 }
%LockExtent(shared=0) public {
	If shared {
		Lock +(^MDM.WS.EJ.tns.EJFinessOccD#"S"):$zu(115,4) Quit:$t 1
		Quit $$Error^%apiOBJ(5799,$classname())
	}
	Lock +(^MDM.WS.EJ.tns.EJFinessOccD):$zu(115,4) Quit:$t 1
	Quit $$Error^%apiOBJ(5798,$classname()) }
%LockId(id,shared=0,timeout) public { s:'($d(timeout)#2) timeout=$zu(115,4)
	If id="" { Quit $$Error^%apiOBJ(5812) }
	Set sc=1
	If 'shared {
		Lock +(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E"):timeout Quit:$t 1
		Quit $$Error^%apiOBJ(5803,id_":"_$classname())
	}
	Lock +(^MDM.WS.EJ.tns.EJFinessOccD(id)#"SE"):timeout Quit:$t 1
	Quit $$Error^%apiOBJ(5804,id_":"_$classname()) }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%buildNum Set:i%buildNum'="" i%buildNum=(..buildNumNormalize(i%buildNum))
	If m%changeDateSIREN Set:i%changeDateSIREN'="" i%changeDateSIREN=(..changeDateSIRENNormalize(i%changeDateSIREN))
	If m%changeReasonSIREN Set:i%changeReasonSIREN'="" i%changeReasonSIREN=(..changeReasonSIRENNormalize(i%changeReasonSIREN))
	If m%codeFINESSEJ Set:i%codeFINESSEJ'="" i%codeFINESSEJ=(..codeFINESSEJNormalize(i%codeFINESSEJ))
	If m%codeSIREN Set:i%codeSIREN'="" i%codeSIREN=(..codeSIRENNormalize(i%codeSIREN))
	If m%countryCode Set:i%countryCode'="" i%countryCode=(..countryCodeNormalize(i%countryCode))
	If m%countryName Set:i%countryName'="" i%countryName=(..countryNameNormalize(i%countryName))
	If m%creationType Set:i%creationType'="" i%creationType=(..creationTypeNormalize(i%creationType))
	If m%deptCode Set:i%deptCode'="" i%deptCode=(..deptCodeNormalize(i%deptCode))
	If m%deptName Set:i%deptName'="" i%deptName=(..deptNameNormalize(i%deptName))
	If m%dictClassName Set:i%dictClassName'="" i%dictClassName=(..dictClassNameNormalize(i%dictClassName))
	If m%email Set:i%email'="" i%email=(..emailNormalize(i%email))
	If m%fax Set:i%fax'="" i%fax=(..faxNormalize(i%fax))
	If m%geoInfo Set:i%geoInfo'="" i%geoInfo=(..geoInfoNormalize(i%geoInfo))
	If m%houseNum Set:i%houseNum'="" i%houseNum=(..houseNumNormalize(i%houseNum))
	If m%info Set:i%info'="" i%info=(..infoNormalize(i%info))
	If m%initSystemRecordId Set:i%initSystemRecordId'="" i%initSystemRecordId=(..initSystemRecordIdNormalize(i%initSystemRecordId))
	If m%isDeleted Set:i%isDeleted'="" i%isDeleted=(..isDeletedNormalize(i%isDeleted))
	If m%liquidateDate Set:i%liquidateDate'="" i%liquidateDate=(..liquidateDateNormalize(i%liquidateDate))
	If m%liquidateType Set:i%liquidateType'="" i%liquidateType=(..liquidateTypeNormalize(i%liquidateType))
	If m%locationCode Set:i%locationCode'="" i%locationCode=(..locationCodeNormalize(i%locationCode))
	If m%locationName Set:i%locationName'="" i%locationName=(..locationNameNormalize(i%locationName))
	If m%locationShortName Set:i%locationShortName'="" i%locationShortName=(..locationShortNameNormalize(i%locationShortName))
	If m%mdmId Set:i%mdmId'="" i%mdmId=(..mdmIdNormalize(i%mdmId))
	If m%mentionDistribution Set:i%mentionDistribution'="" i%mentionDistribution=(..mentionDistributionNormalize(i%mentionDistribution))
	If m%orgCategoryCode Set:i%orgCategoryCode'="" i%orgCategoryCode=(..orgCategoryCodeNormalize(i%orgCategoryCode))
	If m%orgCategoryName Set:i%orgCategoryName'="" i%orgCategoryName=(..orgCategoryNameNormalize(i%orgCategoryName))
	If m%orgCategoryShortName Set:i%orgCategoryShortName'="" i%orgCategoryShortName=(..orgCategoryShortNameNormalize(i%orgCategoryShortName))
	If m%orgCreateDate Set:i%orgCreateDate'="" i%orgCreateDate=(..orgCreateDateNormalize(i%orgCreateDate))
	If m%orgFullName Set:i%orgFullName'="" i%orgFullName=(..orgFullNameNormalize(i%orgFullName))
	If m%orgName Set:i%orgName'="" i%orgName=(..orgNameNormalize(i%orgName))
	If m%orgNameAdditional Set:i%orgNameAdditional'="" i%orgNameAdditional=(..orgNameAdditionalNormalize(i%orgNameAdditional))
	If m%orgPostCode Set:i%orgPostCode'="" i%orgPostCode=(..orgPostCodeNormalize(i%orgPostCode))
	If m%orgUpdateDate Set:i%orgUpdateDate'="" i%orgUpdateDate=(..orgUpdateDateNormalize(i%orgUpdateDate))
	If m%phon2 Set:i%phon2'="" i%phon2=(..phon2Normalize(i%phon2))
	If m%phone Set:i%phone'="" i%phone=(..phoneNormalize(i%phone))
	If m%postalCode Set:i%postalCode'="" i%postalCode=(..postalCodeNormalize(i%postalCode))
	If m%streetName Set:i%streetName'="" i%streetName=(..streetNameNormalize(i%streetName))
	If m%streetType Set:i%streetType'="" i%streetType=(..streetTypeNormalize(i%streetType))
	If m%streetTypeName Set:i%streetTypeName'="" i%streetTypeName=(..streetTypeNameNormalize(i%streetTypeName))
	If m%ts Set:i%ts'="" i%ts=(..tsNormalize(i%ts))
	If m%typologie Set:i%typologie'="" i%typologie=(..typologieNormalize(i%typologie))
	Quit 1 }
%OnDetermineClass(oid,class) public {
	Set id=$listget($get(oid))
	Quit:id="" $$Error^%apiOBJ(5812)
	Set idclass=$lg($get(^MDM.WS.EJ.tns.EJFinessOccD(id)),1)
	If idclass="" { Set class="MDM.WS.EJ.tns.EJFinessOcc" Quit 1 }
	Set class=$piece(idclass,$extract(idclass),*-1)
	Set:class'["." class="User."_class
	QUIT 1 }
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^MDM.WS.EJ.tns.EJFinessOccD(id)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") public {
	If idxlist="" { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(idxlist)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^MDM.WS.EJ.tns.EJFinessOccD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("MDM.WS.EJ.tns.EJFinessOcc","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^MDM.WS.EJ.tns.EJFinessOccD(%d(1))),"MDM.WS.EJ.tns.EJFinessOcc",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^MDM.WS.EJ.tns.EJFinessOccD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"MDM_WS_EJ_tns"_"."_"EJFinessOcc") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"MDM_WS_EJ_tns"_"."_"EJFinessOcc") } QUIT 0
	Return
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'MDM_WS_EJ_tns.EJFinessOcc'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'MDM_WS_EJ_tns.EJFinessOcc'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'MDM_WS_EJ_tns.EJFinessOcc' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'MDM_WS_EJ_tns.EJFinessOcc' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUniqueIndices(pIndices,pOK)
	new d,g,n,o set d=0
	set pOK=1 QUIT
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("APE")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("buildNum")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("changeDateSIREN")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("changeReasonSIREN")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("codeFINESSEJ")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("codeSIREN")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("countryCode")=%d(8) set:$a(%e,9)&&$d(%d(9)) %f("countryName")=%d(9) set:$a(%e,10)&&$d(%d(10)) %f("creationType")=%d(10) set:$a(%e,11)&&$d(%d(11)) %f("deptCode")=%d(11) set:$a(%e,12)&&$d(%d(12)) %f("deptName")=%d(12) set:$a(%e,13)&&$d(%d(13)) %f("dictClassName")=%d(13) set:$a(%e,14)&&$d(%d(14)) %f("email")=%d(14) set:$a(%e,15)&&$d(%d(15)) %f("fax")=%d(15) set:$a(%e,16)&&$d(%d(16)) %f("geoInfo")=%d(16) set:$a(%e,17)&&$d(%d(17)) %f("goldenRecord")=%d(17) set:$a(%e,18)&&$d(%d(18)) %f("houseNum")=%d(18) set:$a(%e,19)&&$d(%d(19)) %f("info")=%d(19) set:$a(%e,20)&&$d(%d(20)) %f("initSystemRecordId")=%d(20) set:$a(%e,21)&&$d(%d(21)) %f("isDeleted")=%d(21) set:$a(%e,22)&&$d(%d(22)) %f("jurStatus")=%d(22) set:$a(%e,23)&&$d(%d(23)) %f("liquidateDate")=%d(23) set:$a(%e,24)&&$d(%d(24)) %f("liquidateType")=%d(24) set:$a(%e,25)&&$d(%d(25)) %f("locationCode")=%d(25) set:$a(%e,26)&&$d(%d(26)) %f("locationName")=%d(26) set:$a(%e,27)&&$d(%d(27)) %f("locationShortName")=%d(27) set:$a(%e,28)&&$d(%d(28)) %f("mdmId")=%d(28) set:$a(%e,29)&&$d(%d(29)) %f("mentionDistribution")=%d(29) set:$a(%e,30)&&$d(%d(30)) %f("orgCategoryCode")=%d(30) set:$a(%e,31)&&$d(%d(31)) %f("orgCategoryName")=%d(31) set:$a(%e,32)&&$d(%d(32)) %f("orgCategoryShortName")=%d(32) set:$a(%e,33)&&$d(%d(33)) %f("orgCreateDate")=%d(33) set:$a(%e,34)&&$d(%d(34)) %f("orgFullName")=%d(34) set:$a(%e,35)&&$d(%d(35)) %f("orgName")=%d(35) set:$a(%e,36)&&$d(%d(36)) %f("orgNameAdditional")=%d(36) set:$a(%e,37)&&$d(%d(37)) %f("orgPostCode")=%d(37) set:$a(%e,38)&&$d(%d(38)) %f("orgUpdateDate")=%d(38) set:$a(%e,39)&&$d(%d(39)) %f("phon2")=%d(39) set:$a(%e,40)&&$d(%d(40)) %f("phone")=%d(40) set:$a(%e,41)&&$d(%d(41)) %f("postalCode")=%d(41) set:$a(%e,42)&&$d(%d(42)) %f("streetName")=%d(42) set:$a(%e,43)&&$d(%d(43)) %f("streetType")=%d(43) set:$a(%e,44)&&$d(%d(44)) %f("streetTypeName")=%d(44) set:$a(%e,45)&&$d(%d(45)) %f("ts")=%d(45) set:$a(%e,46)&&$d(%d(46)) %f("typologie")=%d(46) set:$a(%e,47)&&$d(%d(47)) %f("x__classname")=%d(47)
	QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table MDM_WS_EJ_tns.EJFinessOcc
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^MDM.WS.EJ.tns.EJFinessOccD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("MDM.WS.EJ.tns.EJFinessOcc","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"MDM_WS_EJ_tns"_"."_"EJFinessOcc",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"MDM_WS_EJ_tns"_"."_"EJFinessOcc",%rowid) do ..%SQLEExit() QUIT  }
	if %e(47)'="" { set sn=$p(%e(47),$e(%e(47)),$l(%e(47),$e(%e(47)))-1) if "MDM.WS.EJ.tns.EJFinessOcc"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","MDM.WS.EJ.tns.EJFinessOcc",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","MDM.WS.EJ.tns.EJFinessOcc",%k,"f",%t)) quit:%t=""  set %st=(%t="MDM.WS.EJ.tns.EJFinessOcc") set %fk="" for  set %fk=$o(^rINDEXEXT("F","MDM.WS.EJ.tns.EJFinessOcc",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("MDM_WS_EJ_tns","EJFinessOcc","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^MDM.WS.EJ.tns.EJFinessOccD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"MDM_WS_EJ_tns"_"."_"EJFinessOcc",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"MDM_WS_EJ_tns"_"."_"EJFinessOcc") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=%pVal(1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"MDM_WS_EJ_tns"_"."_"EJFinessOcc"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^MDM.WS.EJ.tns.EJFinessOccD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	new s set %d(1)=%rowid,s="" if '$d(^MDM.WS.EJ.tns.EJFinessOccD(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(47)=$lg(s)
	QUIT
%SQLGetOldAll()
	new s set %d(1)=%rowid,s="" if '$d(^MDM.WS.EJ.tns.EJFinessOccD(%d(1)),s) { set sqlcode=100 quit  }
	 S $lg(%e(47),%e(21),%e(45),%e(20),%e(13),%e(2),%e(3),%e(4),%e(5),%e(6),%e(7),%e(8),%e(9),%e(10),%e(11),%e(12),%e(14),%e(15),%e(16),%e(17),%e(18),%e(28),%e(19),%e(22),%e(23),%e(24),%e(25),%e(26),%e(27),%e(29),%e(30),%e(31),%e(32),%e(33),%e(34),%e(35),%e(36),%e(37),%e(38),%e(39),%e(40),%e(41),%e(42),%e(43),%e(44),%e(46))=s
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table MDM_WS_EJ_tns.EJFinessOcc
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","MDM_WS_EJ_tns"_"."_"EJFinessOcc") RETURN ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^MDM.WS.EJ.tns.EJFinessOccD) } elseif %d(1)>$g(^MDM.WS.EJ.tns.EJFinessOccD) { if $i(^MDM.WS.EJ.tns.EJFinessOccD,$zabs(%d(1)-$g(^MDM.WS.EJ.tns.EJFinessOccD))) {}} elseif $d(^MDM.WS.EJ.tns.EJFinessOccD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"MDM_WS_EJ_tns"_"."_"EJFinessOcc"_"."_"ID") do ..%SQLEExit() RETURN "" }
	set:'($d(%d(47))#2) %d(47)=""
	if '$a(%check,2) {
		new %ls lock +^MDM.WS.EJ.tns.EJFinessOccD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("MDM.WS.EJ.tns.EJFinessOcc","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"MDM_WS_EJ_tns"_"."_"EJFinessOcc",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	}
	set ^MDM.WS.EJ.tns.EJFinessOccD(%d(1))=$lb(%d(47),%d(21),%d(45),%d(20),%d(13),%d(2),%d(3),%d(4),%d(5),%d(6),%d(7),%d(8),%d(9),%d(10),%d(11),%d(12),%d(14),%d(15),%d(16),%d(17),%d(18),%d(28),%d(19),%d(22),%d(23),%d(24),%d(25),%d(26),%d(27),%d(29),%d(30),%d(31),%d(32),%d(33),%d(34),%d(35),%d(36),%d(37),%d(38),%d(39),%d(40),%d(41),%d(42),%d(43),%d(44),%d(46))
	lock:$a(%l) -^MDM.WS.EJ.tns.EJFinessOccD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"MDM_WS_EJ_tns"_"."_"EJFinessOcc",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"MDM_WS_EJ_tns"_"."_"EJFinessOcc") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"MDM_WS_EJ_tns"_"."_"EJFinessOcc"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"MDM_WS_EJ_tns"_"."_"EJFinessOcc") quit
%SQLNormalizeFields()
	set:$g(%d(23))'="" %d(23)=$$NormalizeField23(%d(23))
	set:$g(%d(33))'="" %d(33)=$$NormalizeField33(%d(33))
	set:$g(%d(38))'="" %d(38)=$$NormalizeField38(%d(38))
	set:$g(%d(4))'="" %d(4)=$$NormalizeField4(%d(4))
	set:$g(%d(45))'="" %d(45)=$$NormalizeField45(%d(45))
	set:$g(%d(21))'="" %d(21)=$s(%d(21)="":"",1:%d(21)\1)
	new %f for %f=2,17,22,28 { set:$g(%d(%f))'="" %d(%f)=$select(%d(%f)=$c(0)&&$zu(115,13):"",1:%d(%f)\1) }
	QUIT
NormalizeField4(%val) {	Quit $s(%val="":"",$zu(115,13)&&(%val=$c(0)):"",%val=(%val\1):$zdate(%val,3,,,,,-672045,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3)_" "_%val,$l(%val)=10:%val_" 00:00:00",$zdatetimeh(%val,3,,,,,,-672045,,"")="":"error",1:$zdatetime($zdatetimeh($p(%val,"."),3,,,,,,-672045,,""),3,,,,,,,-672045)_$s(+$p(%val,".",2)=0:"",1:+("."_$e($p(%val,".",2),1,9))))
}
NormalizeField23(%val) {	Quit $s(%val="":"",$zu(115,13)&&(%val=$c(0)):"",%val=(%val\1):$zdate(%val,3,,,,,-672045,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3)_" "_%val,$l(%val)=10:%val_" 00:00:00",$zdatetimeh(%val,3,,,,,,-672045,,"")="":"error",1:$zdatetime($zdatetimeh($p(%val,"."),3,,,,,,-672045,,""),3,,,,,,,-672045)_$s(+$p(%val,".",2)=0:"",1:+("."_$e($p(%val,".",2),1,9))))
}
NormalizeField33(%val) {	Quit $s(%val="":"",$zu(115,13)&&(%val=$c(0)):"",%val=(%val\1):$zdate(%val,3,,,,,-672045,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3)_" "_%val,$l(%val)=10:%val_" 00:00:00",$zdatetimeh(%val,3,,,,,,-672045,,"")="":"error",1:$zdatetime($zdatetimeh($p(%val,"."),3,,,,,,-672045,,""),3,,,,,,,-672045)_$s(+$p(%val,".",2)=0:"",1:+("."_$e($p(%val,".",2),1,9))))
}
NormalizeField38(%val) {	Quit $s(%val="":"",$zu(115,13)&&(%val=$c(0)):"",%val=(%val\1):$zdate(%val,3,,,,,-672045,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3)_" "_%val,$l(%val)=10:%val_" 00:00:00",$zdatetimeh(%val,3,,,,,,-672045,,"")="":"error",1:$zdatetime($zdatetimeh($p(%val,"."),3,,,,,,-672045,,""),3,,,,,,,-672045)_$s(+$p(%val,".",2)=0:"",1:+("."_$e($p(%val,".",2),1,9))))
}
NormalizeField45(%val) {	Quit $s(%val="":"",$zu(115,13)&&(%val=$c(0)):"",%val=(%val\1):$zdate(%val,3,,,,,-672045,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3)_" "_%val,$l(%val)=10:%val_" 00:00:00",$zdatetimeh(%val,3,,,,,,-672045,,"")="":"error",1:$zdatetime($zdatetimeh($p(%val,"."),3,,,,,,-672045,,""),3,,,,,,,-672045)_$s(+$p(%val,".",2)=0:"",1:+("."_$e($p(%val,".",2),1,9))))
}
	Return
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"MDM_WS_EJ_tns"_"."_"EJFinessOcc",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^MDM.WS.EJ.tns.EJFinessOccD(d(1))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"MDM_WS_EJ_tns"_"."_"EJFinessOcc",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^MDM.WS.EJ.tns.EJFinessOccD(d(1)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if qq { set d(47)=$lg(s) if d(47)'="" { new sn set sn=$p(d(47),$e(d(47)),$l(d(47),$e(d(47)))-1) if "MDM.WS.EJ.tns.EJFinessOcc"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}}
	set d(2)=$lg(s,6) set d(3)=$lg(s,7) set d(4)=$lg(s,8) set d(5)=$lg(s,9) set d(6)=$lg(s,10) set d(7)=$lg(s,11) set d(8)=$lg(s,12) set d(9)=$lg(s,13) set d(10)=$lg(s,14) set d(11)=$lg(s,15) set d(12)=$lg(s,16) set d(13)=$lg(s,5) set d(14)=$lg(s,17) set d(15)=$lg(s,18) set d(16)=$lg(s,19) set d(17)=$lg(s,20) set d(18)=$lg(s,21) set d(19)=$lg(s,23) set d(20)=$lg(s,4) set d(21)=$lg(s,2) set d(22)=$lg(s,24) set d(23)=$lg(s,25) set d(24)=$lg(s,26) set d(25)=$lg(s,27) set d(26)=$lg(s,28) set d(27)=$lg(s,29) set d(28)=$lg(s,22) set d(29)=$lg(s,30) set d(30)=$lg(s,31) set d(31)=$lg(s,32) set d(32)=$lg(s,33) set d(33)=$lg(s,34) set d(34)=$lg(s,35) set d(35)=$lg(s,36) set d(36)=$lg(s,37) set d(37)=$lg(s,38) set d(38)=$lg(s,39) set d(39)=$lg(s,40) set d(40)=$lg(s,41) set d(41)=$lg(s,42) set d(42)=$lg(s,43) set d(43)=$lg(s,44) set d(44)=$lg(s,45) set d(45)=$lg(s,3) set d(46)=$lg(s,46) set d(47)=$lg(s)  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^MDM.WS.EJ.tns.EJFinessOccD(d(1))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("MDM.WS.EJ.tns.EJFinessOcc",18),d=$zobjexport(47,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^MDM.WS.EJ.tns.EJFinessOccD(d(1))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Return
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^MDM.WS.EJ.tns.EJFinessOccD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^MDM.WS.EJ.tns.EJFinessOccD#s QUIT 1
	Return
%SQLUnlock()
	lock:$a(%l) -^MDM.WS.EJ.tns.EJFinessOccD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"MDM_WS_EJ_tns"_"."_"EJFinessOcc",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"MDM_WS_EJ_tns"_"."_"EJFinessOcc",cname) } quit
	Return
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table MDM_WS_EJ_tns.EJFinessOcc
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","MDM_WS_EJ_tns"_"."_"EJFinessOcc") QUIT  }
	for icol=2:1:47 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^MDM.WS.EJ.tns.EJFinessOccD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("MDM.WS.EJ.tns.EJFinessOcc","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"MDM_WS_EJ_tns"_"."_"EJFinessOcc",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"MDM_WS_EJ_tns"_"."_"EJFinessOcc",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(47)) %d(47)=%e(47) set:%d(47)=%e(47) $e(%e,47)=$c(0) } else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"MDM_WS_EJ_tns"_"."_"EJFinessOcc",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(47)'="" set sn=$p(%e(47),$e(%e(47)),$l(%e(47),$e(%e(47)))-1) if "MDM.WS.EJ.tns.EJFinessOcc"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	if ($zboolean(%e,$c(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),1)[$c(1)) {
		set ^MDM.WS.EJ.tns.EJFinessOccD(%d(1))=$listupdate($g(^MDM.WS.EJ.tns.EJFinessOccD(%d(1))),1,$a(%e,47):%d(47),$a(%e,21):%d(21),$a(%e,45):%d(45),$a(%e,20):%d(20),$a(%e,13):%d(13),$a(%e,2):%d(2),$a(%e,3):%d(3),$a(%e,4):%d(4),$a(%e,5):%d(5),$a(%e,6):%d(6),$a(%e,7):%d(7),$a(%e,8):%d(8),$a(%e,9):%d(9),$a(%e,10):%d(10),$a(%e,11):%d(11),$a(%e,12):%d(12),$a(%e,14):%d(14),$a(%e,15):%d(15),$a(%e,16):%d(16),$a(%e,17):%d(17),$a(%e,18):%d(18),$a(%e,28):%d(28),$a(%e,19):%d(19),$a(%e,22):%d(22),$a(%e,23):%d(23),$a(%e,24):%d(24),$a(%e,25):%d(25),$a(%e,26):%d(26),$a(%e,27):%d(27),$a(%e,29):%d(29),$a(%e,30):%d(30),$a(%e,31):%d(31),$a(%e,32):%d(32),$a(%e,33):%d(33),$a(%e,34):%d(34),$a(%e,35):%d(35),$a(%e,36):%d(36),$a(%e,37):%d(37),$a(%e,38):%d(38),$a(%e,39):%d(39),$a(%e,40):%d(40),$a(%e,41):%d(41),$a(%e,42):%d(42),$a(%e,43):%d(43),$a(%e,44):%d(44),$a(%e,46):%d(46))
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"MDM_WS_EJ_tns"_"."_"EJFinessOcc",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"MDM_WS_EJ_tns"_"."_"EJFinessOcc") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLValidateCompFields(sqlcode)
	QUIT 'sqlcode
%SQLValidateFields(sqlcode)
	if $g(%d(21))'="",'($$ValidateField21(%d(21))) { set sqlcode=..%SQLInvalid(21+1,%d(21)) } 
	if $g(%d(23))'="",'($$ValidateField23(%d(23))) { set sqlcode=..%SQLInvalid(23+1,%d(23)) } 
	if $g(%d(33))'="",'($$ValidateField33(%d(33))) { set sqlcode=..%SQLInvalid(33+1,%d(33)) } 
	if $g(%d(38))'="",'($$ValidateField38(%d(38))) { set sqlcode=..%SQLInvalid(38+1,%d(38)) } 
	if $g(%d(4))'="",'($$ValidateField4(%d(4))) { set sqlcode=..%SQLInvalid(4+1,%d(4)) } 
	if $g(%d(45))'="",'($$ValidateField45(%d(45))) { set sqlcode=..%SQLInvalid(45+1,%d(45)) } 
	if $g(%d(41))'="",'($s(($s(%d(41)'=$c(0):$l(%d(41)),1:0)'<5)&&($l(%d(41))'>5):1,$s(%d(41)'=$c(0):$l(%d(41)),1:0)<5:$$Error^%apiOBJ(7202,%d(41),5),1:$$Error^%apiOBJ(7201,%d(41),5))) { set sqlcode=..%SQLInvalid(41+1,%d(41)) } 
	new %f for %f=6,7 { if $g(%d(%f))'="",'($s(($s(%d(%f)'=$c(0):$l(%d(%f)),1:0)'<9)&&($l(%d(%f))'>9):1,$s(%d(%f)'=$c(0):$l(%d(%f)),1:0)<9:$$Error^%apiOBJ(7202,%d(%f),9),1:$$Error^%apiOBJ(7201,%d(%f),9))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	if $g(%d(28))'="",'($select(%d(28)=$c(0)&&$zu(115,13):1,$isvalidnum(%d(28),0):1,1:$$Error^%apiOBJ(7207,%d(28)))) { set sqlcode=..%SQLInvalid(28+1,%d(28)) } 
	for %f=13,20 { if $g(%d(%f))'="",'(($l(%d(%f))'>250)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	for %f=3,5,8,9,10,11,12,14,15,16,18,19,24,25,26,27,29,30,31,32,34,35,36,37,39,40,42,43,44,46 { if $g(%d(%f))'="",'(($l(%d(%f))'>255)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	QUIT 'sqlcode
ValidateField4(%val) {	RETURN:$zu(115,13)&&(%val=$c(0)) 1
	Set val=%val,%val=$select(%val=(%val\1):$zdate(%val,3,,,,,0,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3,,,,,0)_" "_%val,$length(%val)=10:%val_" 00:00:00",1:%val)
	Quit:($length(%val)<19||($zdatetimeh(%val,3,,,,,,0,,"")="")) $$Error^%apiOBJ(7208,val)
	Quit 1
}
ValidateField21(%val="") {	Quit $isvalidnum(%val,0,0,2)&&(+%val'=2)
}
ValidateField23(%val) {	RETURN:$zu(115,13)&&(%val=$c(0)) 1
	Set val=%val,%val=$select(%val=(%val\1):$zdate(%val,3,,,,,0,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3,,,,,0)_" "_%val,$length(%val)=10:%val_" 00:00:00",1:%val)
	Quit:($length(%val)<19||($zdatetimeh(%val,3,,,,,,0,,"")="")) $$Error^%apiOBJ(7208,val)
	Quit 1
}
ValidateField33(%val) {	RETURN:$zu(115,13)&&(%val=$c(0)) 1
	Set val=%val,%val=$select(%val=(%val\1):$zdate(%val,3,,,,,0,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3,,,,,0)_" "_%val,$length(%val)=10:%val_" 00:00:00",1:%val)
	Quit:($length(%val)<19||($zdatetimeh(%val,3,,,,,,0,,"")="")) $$Error^%apiOBJ(7208,val)
	Quit 1
}
ValidateField38(%val) {	RETURN:$zu(115,13)&&(%val=$c(0)) 1
	Set val=%val,%val=$select(%val=(%val\1):$zdate(%val,3,,,,,0,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3,,,,,0)_" "_%val,$length(%val)=10:%val_" 00:00:00",1:%val)
	Quit:($length(%val)<19||($zdatetimeh(%val,3,,,,,,0,,"")="")) $$Error^%apiOBJ(7208,val)
	Quit 1
}
ValidateField45(%val) {	RETURN:$zu(115,13)&&(%val=$c(0)) 1
	Set val=%val,%val=$select(%val=(%val\1):$zdate(%val,3,,,,,0,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3,,,,,0)_" "_%val,$length(%val)=10:%val_" 00:00:00",1:%val)
	Quit:($length(%val)<19||($zdatetimeh(%val,3,,,,,,0,,"")="")) $$Error^%apiOBJ(7208,val)
	Quit 1
}
	Return
%SQLnBuild() public {
	set %n=$lb(,"ID","APE","buildNum","changeDateSIREN","changeReasonSIREN","codeFINESSEJ","codeSIREN","countryCode","countryName","creationType","deptCode","deptName","dictClassName","email","fax","geoInfo","goldenRecord","houseNum","info","initSystemRecordId","isDeleted","jurStatus","liquidateDate","liquidateType","locationCode","locationName","locationShortName","mdmId","mentionDistribution","orgCategoryCode","orgCategoryName","orgCategoryShortName","orgCreateDate","orgFullName","orgName","orgNameAdditional","orgPostCode","orgUpdateDate","phon2","phone","postalCode","streetName","streetType","streetTypeName","ts","typologie","x__classname")
	QUIT }
%Save(related=1) public {
	Set $ZTrap="%SaveERR"
	New %objTX Set sc=1,traninit=0 If '$data(%objTX2) New %objTX2 Set %objTX2=1
	If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) Quit:('sc) sc Set intRef=+$this,objValue=$get(%objTX(1,+$g(%objTX(0,intRef)),1)),sc=..%SerializeObject(.objValue,1) Set:(''sc) %objTX(1,%objTX(0,intRef),1)=objValue Quit sc
	Set sc=..%BuildObjectGraph(related+2) If ('sc) ZTrap "SG"
	If '$data(%objTX(2)) s sc=1 GoTo %SaveCOMMIT
	Set %objTX(3)=0,i="" For  Set i=$order(%objTX(2,i),1,data) Quit:i=""  Set intRef=$li(data) If '$data(%objTX(1,+$g(%objTX(0,intRef)),2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,%objTX(0,intRef)) Kill %objTX(2,i),%objTX(11,intRef)
	For ptr=1:1 Quit:ptr>%objTX(3)  Set objRef=%objTX(3,ptr),objValue=$get(%objTX(1,+$g(%objTX(0,+objRef)),1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,%objTX(0,+objRef),1)=objValue Kill %objTX(1,%objTX(0,+objRef),3) Do $system.CLS.SetModified(objRef,0)
	. If ('sc) ZTrap "SG"
	. i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef) }
	. Set intSucc="" For  Set intSucc=$order(%objTX(1,%objTX(0,+objRef),3,intSucc)) Quit:intSucc=""  Kill %objTX(1,%objTX(0,+objRef),3,intSucc),%objTX(1,intSucc,2,%objTX(0,+objRef)) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	Kill %objTX(3) Set %objTX(3)=0 For  Set pserial=0 Do  Quit:'pserial
	. Set i="" For  Set i=$order(%objTX(2,i),1,data) Quit:i=""  Set intPred="",intRef=$li(data) For  Set intPred=$order(%objTX(1,%objTX(0,intRef),2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) If ('sc) { If $d(%objTX(11,+%objTX(1,intPred))) { Set %objTX(2,%objTX(11,+%objTX(1,intPred)),1)=sc } Else { Set %objTX(2,$i(%objTX(2)),1)=sc,%objTX(11,+%objTX(1,intPred))=%objTX(2) } } If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
	. . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	. . For ptr=1:1 Quit:ptr>%objTX(3)  Set objSerialize=%objTX(3,ptr),objValue=$get(%objTX(1,+$g(%objTX(0,+objSerialize)),1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,%objTX(0,+objSerialize),1)=objValue Kill %objTX(1,%objTX(0,+objSerialize),3) Do $system.CLS.SetModified(objSerialize,0)
	. . . If ('sc) ZTrap "SG"
	. . . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize) }
	. . . Set intSucc="" For  Set intSucc=$order(%objTX(1,%objTX(0,+objSerialize),3,intSucc)) Quit:intSucc=""  Kill %objTX(1,%objTX(0,+objSerialize),3,intSucc),%objTX(1,intSucc,2,%objTX(0,+objSerialize)) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	. . Kill %objTX(3) Set %objTX(3)=0
	If $data(%objTX(2))>2 {
		Set sc=$$Error^%apiOBJ(5827,$classname())
		set i="" for  set i=$order(%objTX(2,i)) quit:i=""  if ('$Get(%objTX(2,i,1),1)) set sc=$$EmbedStatus^%apiOBJ(sc,%objTX(2,i,1))
	 	ZTrap "SG"
	}
	Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%SaveCOMMIT	If traninit { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } }
	Do $system.CLS.SetModified(0) Quit sc
%SaveERR	Set $ZTrap="" If $extract($zerror,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	If $get(traninit) { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } }
	Quit sc }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^MDM.WS.EJ.tns.EJFinessOccD) do ..%IdSet(id) set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^MDM.WS.EJ.tns.EJFinessOccD(id))) {
					set insert=1
					if lock { lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if ('lockok&&..%Concurrency&&$tlevel)||(i%%Concurrency=4) {  lock +(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^MDM.WS.EJ.tns.EJFinessOccD(id)#"ES") set tSharedLock=1 }
				set ^MDM.WS.EJ.tns.EJFinessOccD(id)=$lb("",i%isDeleted,i%ts,i%initSystemRecordId,i%dictClassName,i%APE,i%buildNum,i%changeDateSIREN,i%changeReasonSIREN,i%codeFINESSEJ,i%codeSIREN,i%countryCode,i%countryName,i%creationType,i%deptCode,i%deptName,i%email,i%fax,i%geoInfo,i%goldenRecord,i%houseNum,i%mdmId,i%info,i%jurStatus,i%liquidateDate,i%liquidateType,i%locationCode,i%locationName,i%locationShortName,i%mentionDistribution,i%orgCategoryCode,i%orgCategoryName,i%orgCategoryShortName,i%orgCreateDate,i%orgFullName,i%orgName,i%orgNameAdditional,i%orgPostCode,i%orgUpdateDate,i%phon2,i%phone,i%postalCode,i%streetName,i%streetType,i%streetTypeName,i%typologie)
			}
			else {
				set ^MDM.WS.EJ.tns.EJFinessOccD(id)=$lb("",i%isDeleted,i%ts,i%initSystemRecordId,i%dictClassName,i%APE,i%buildNum,i%changeDateSIREN,i%changeReasonSIREN,i%codeFINESSEJ,i%codeSIREN,i%countryCode,i%countryName,i%creationType,i%deptCode,i%deptName,i%email,i%fax,i%geoInfo,i%goldenRecord,i%houseNum,i%mdmId,i%info,i%jurStatus,i%liquidateDate,i%liquidateType,i%locationCode,i%locationName,i%locationShortName,i%mentionDistribution,i%orgCategoryCode,i%orgCategoryName,i%orgCategoryShortName,i%orgCreateDate,i%orgFullName,i%orgName,i%orgNameAdditional,i%orgPostCode,i%orgUpdateDate,i%phon2,i%phone,i%postalCode,i%streetName,i%streetType,i%streetTypeName,i%typologie)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"="" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)) }
		}
		if lock lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set id=$i(^MDM.WS.EJ.tns.EJFinessOccD) }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^MDM.WS.EJ.tns.EJFinessOccD(id))) {
					set insert=1
					if lock { lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^MDM.WS.EJ.tns.EJFinessOccD(id)=data
			}
			else {
				set ^MDM.WS.EJ.tns.EJFinessOccD(id)=data
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) public {
	Quit 1 }
%SerializeObject(serial,partial=0) public {
	try {
		If $get(%objTX2(+$this)) { Set partial = 1 } ElseIf ('partial) { Set %objTX2(+$this) = 1 }
		Set sc=..%ValidateObject(,0) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set sc=..%NormalizeObject() Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		If r%APE'="" { Set:'$data(%objTX(0,+r%APE)) %objTX(0,+r%APE)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%APE))=r%APE,%objTX(1,%objTX(0,+r%APE),1)=..APEGetObject(1),%objTX(1,%objTX(0,+r%APE),6)=1 Set M%APE=1,i%APE=$listget(%objTX(1,%objTX(0,+r%APE),1)) }
		If r%goldenRecord'="" { Set:'$data(%objTX(0,+r%goldenRecord)) %objTX(0,+r%goldenRecord)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%goldenRecord))=r%goldenRecord,%objTX(1,%objTX(0,+r%goldenRecord),1)=..goldenRecordGetObject(1),%objTX(1,%objTX(0,+r%goldenRecord),6)=1 Set M%goldenRecord=1,i%goldenRecord=$listget(%objTX(1,%objTX(0,+r%goldenRecord),1)) }
		If r%jurStatus'="" { Set:'$data(%objTX(0,+r%jurStatus)) %objTX(0,+r%jurStatus)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%jurStatus))=r%jurStatus,%objTX(1,%objTX(0,+r%jurStatus),1)=..jurStatusGetObject(1),%objTX(1,%objTX(0,+r%jurStatus),6)=1 Set M%jurStatus=1,i%jurStatus=$listget(%objTX(1,%objTX(0,+r%jurStatus),1)) }
		s:$g(%objtxSTATUS)=2 %objtxLIST(+$this)=$this
		Set id=$listget(serial),sc=..%SaveData(.id) If ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) }
		Set serial=(..%Oid())
		if 'partial {
			Set %objTX2(+$this) = 0
		}
		set sc=1
	}
	catch tException {
		If 'partial { Set %objTX2(+$this) = 0 }
		set sc = tException.AsStatus()
	}
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) public {
	If $data(%objTX(0,+$this)) && ('refresh) Quit 1
	Set sc=1,intOref=+$this
	If refresh,$data(%objTX(0,intOref),index) Set intPoref="" For  Set intPoref=$order(%objTX(1,index,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,%objTX(0,intPoref),3,index),%objTX(1,index,2,%objTX(0,intPoref))
	Set serial=i%"%%OID",%objTX(0,intOref)=$i(%objTX(1)),%objTX(1,%objTX(1))=$this,%objTX(1,%objTX(1),1)=serial,%objTX(1,%objTX(1),6)=1 If (serial '= "") && (depth<2) { Quit 1 } Else { Set %objTX(7,%objTX(1))=$lb(intOref,1) }
	Set Poref=r%APE If Poref'="" Set:'$data(%objTX(0,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,2)
	Set Poref=r%goldenRecord If Poref'="" Set:'$data(%objTX(0,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,2)
	Set Poref=r%jurStatus If Poref'="" Set:'$data(%objTX(0,+Poref)) %objTX(6,$i(%objTX(6)))=Poref Set %objTX(8,$i(%objTX(8)))=$lb(+Poref,intOref,2)
exit	Quit sc }
%SortBegin(idxlist="",excludeunique=0)
	Quit 1
%SortEnd(idxlist="",commit=1,excludeunique=0) public {
	Quit 1 }
%UnlockExtent(shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -^MDM.WS.EJ.tns.EJFinessOccD
			 Quit 1
		}
		Lock -^MDM.WS.EJ.tns.EJFinessOccD#"I"
		Quit 1
	}
	If 'immediate {
		Lock -^MDM.WS.EJ.tns.EJFinessOccD#"S"
		Quit 1
	}
	Lock -^MDM.WS.EJ.tns.EJFinessOccD#"SI"
	Quit 1 }
%UnlockId(id,shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)#"E")
			Quit 1
		}
		Lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)#"IE")
		Quit 1
	}
	If 'immediate {
		Lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)#"SE")
		Quit 1
	}
	Lock -(^MDM.WS.EJ.tns.EJFinessOccD(id)#"SIE")
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'MDM.WS.EJ.tns.EJFinessOcc'"
	QUIT 1
%ValidateObject(unused=0,checkserial=1) public {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	If m%buildNum Set iv=..buildNum If iv'="" Set rc=(..buildNumIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"buildNum",iv)
	If m%changeDateSIREN Set iv=..changeDateSIREN If iv'="" Set rc=(..changeDateSIRENIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"changeDateSIREN",iv)
	If m%changeReasonSIREN Set iv=..changeReasonSIREN If iv'="" Set rc=(..changeReasonSIRENIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"changeReasonSIREN",iv)
	If m%codeFINESSEJ Set iv=..codeFINESSEJ If iv'="" Set rc=(..codeFINESSEJIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"codeFINESSEJ",iv)
	If m%codeSIREN Set iv=..codeSIREN If iv'="" Set rc=(..codeSIRENIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"codeSIREN",iv)
	If m%countryCode Set iv=..countryCode If iv'="" Set rc=(..countryCodeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"countryCode",iv)
	If m%countryName Set iv=..countryName If iv'="" Set rc=(..countryNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"countryName",iv)
	If m%creationType Set iv=..creationType If iv'="" Set rc=(..creationTypeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"creationType",iv)
	If m%deptCode Set iv=..deptCode If iv'="" Set rc=(..deptCodeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"deptCode",iv)
	If m%deptName Set iv=..deptName If iv'="" Set rc=(..deptNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"deptName",iv)
	If m%dictClassName Set iv=..dictClassName If iv'="" Set rc=(..dictClassNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"dictClassName",iv)
	If m%email Set iv=..email If iv'="" Set rc=(..emailIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"email",iv)
	If m%fax Set iv=..fax If iv'="" Set rc=(..faxIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"fax",iv)
	If m%geoInfo Set iv=..geoInfo If iv'="" Set rc=(..geoInfoIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"geoInfo",iv)
	If m%houseNum Set iv=..houseNum If iv'="" Set rc=(..houseNumIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"houseNum",iv)
	If m%info Set iv=..info If iv'="" Set rc=(..infoIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"info",iv)
	If m%initSystemRecordId Set iv=..initSystemRecordId If iv'="" Set rc=(..initSystemRecordIdIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"initSystemRecordId",iv)
	If m%isDeleted Set iv=..isDeleted If iv'="" Set rc=(..isDeletedIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"isDeleted",iv)
	If m%liquidateDate Set iv=..liquidateDate If iv'="" Set rc=(..liquidateDateIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"liquidateDate",iv)
	If m%liquidateType Set iv=..liquidateType If iv'="" Set rc=(..liquidateTypeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"liquidateType",iv)
	If m%locationCode Set iv=..locationCode If iv'="" Set rc=(..locationCodeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"locationCode",iv)
	If m%locationName Set iv=..locationName If iv'="" Set rc=(..locationNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"locationName",iv)
	If m%locationShortName Set iv=..locationShortName If iv'="" Set rc=(..locationShortNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"locationShortName",iv)
	If m%mdmId Set iv=..mdmId If iv'="" Set rc=(..mdmIdIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"mdmId",iv)
	If m%mentionDistribution Set iv=..mentionDistribution If iv'="" Set rc=(..mentionDistributionIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"mentionDistribution",iv)
	If m%orgCategoryCode Set iv=..orgCategoryCode If iv'="" Set rc=(..orgCategoryCodeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"orgCategoryCode",iv)
	If m%orgCategoryName Set iv=..orgCategoryName If iv'="" Set rc=(..orgCategoryNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"orgCategoryName",iv)
	If m%orgCategoryShortName Set iv=..orgCategoryShortName If iv'="" Set rc=(..orgCategoryShortNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"orgCategoryShortName",iv)
	If m%orgCreateDate Set iv=..orgCreateDate If iv'="" Set rc=(..orgCreateDateIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"orgCreateDate",iv)
	If m%orgFullName Set iv=..orgFullName If iv'="" Set rc=(..orgFullNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"orgFullName",iv)
	If m%orgName Set iv=..orgName If iv'="" Set rc=(..orgNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"orgName",iv)
	If m%orgNameAdditional Set iv=..orgNameAdditional If iv'="" Set rc=(..orgNameAdditionalIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"orgNameAdditional",iv)
	If m%orgPostCode Set iv=..orgPostCode If iv'="" Set rc=(..orgPostCodeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"orgPostCode",iv)
	If m%orgUpdateDate Set iv=..orgUpdateDate If iv'="" Set rc=(..orgUpdateDateIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"orgUpdateDate",iv)
	If m%phon2 Set iv=..phon2 If iv'="" Set rc=(..phon2IsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"phon2",iv)
	If m%phone Set iv=..phone If iv'="" Set rc=(..phoneIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"phone",iv)
	If m%postalCode Set iv=..postalCode If iv'="" Set rc=(..postalCodeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"postalCode",iv)
	If m%streetName Set iv=..streetName If iv'="" Set rc=(..streetNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"streetName",iv)
	If m%streetType Set iv=..streetType If iv'="" Set rc=(..streetTypeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"streetType",iv)
	If m%streetTypeName Set iv=..streetTypeName If iv'="" Set rc=(..streetTypeNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"streetTypeName",iv)
	If m%ts Set iv=..ts If iv'="" Set rc=(..tsIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"ts",iv)
	If m%typologie Set iv=..typologie If iv'="" Set rc=(..typologieIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"typologie",iv)
	Quit sc }
zXMLDTD(top,format,input,dtdlist)
 Quit ##class(%XML.Implementation).XMLDTD("MDM.WS.EJ.tns.EJFinessOcc",.top,.format,.input,.dtdlist)
zXMLExportInternal()
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"MDM.WS.EJ.tns.EJFinessOcc")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 If encoded,'inlineFlagArg,(id="") Set id=$increment(idlist)
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 If 'nocycle,('encoded||inlineFlag) {
   If $data(oreflist($this)) Quit $$Error^%apiOBJ(6296,"MDM.WS.EJ.tns.EJFinessOcc")
   Set oreflist($this)=""
 }
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="MDM.WS.EJ.tns.EJFinessOcc"))
 If $IsObject(namespaces) {
   If namespaces.Stable,namespaces.CurrentNamespace="http://kanosoftware.com/soap",'tmpi||(typesPrefix'="") {
     Set topAttrs=""
   } Else {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("http://kanosoftware.com/soap",$get(local,0),(encoded||tmpi),1,,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   }
   Set beginprefix=$select(usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="EJFinessOcc"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"EJFinessOcc"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"EJFinessOcc"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..isDeleted
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"isDeleted"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"boolean""",1:"")_">"_$s(val:"true",1:"false")_endprefix_"isDeleted>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..ts
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"ts"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"dateTime""",1:"")_">"_$select(val="":"",1:$translate(val," ","T")_"Z")_endprefix_"ts>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..initSystemRecordId
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"initSystemRecordId"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"initSystemRecordId>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..dictClassName
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"dictClassName"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"dictClassName>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..APE
 If $IsObject(val) , deepFlag {
   Set id=""
   If encoded,'inlineFlag {
     Set temp=$select($parameter("MDM.WS.EJ.tns.APE","XMLSUMMARY")'="":-1,1:1)
     Set id=+$get(idlist(temp*val))
     If 'soap12 , (id=0) Set id=$increment(idlist),oreflist(temp*id)=val,idlist(temp*val)=id
   }
   If +id'=0 {
     Set %xmlmsg=currentIndent_beginprefix_"APE "_$select(soap12:soapPrefix_"ref=""",1:"href=""#")_"id"_id_""" />" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   } Else { if id=0 Set id=$increment(idlist)
     Set topArg="APE",summaryArg=1,group=0,createId=$get(id),typeAttr=$select(encoded||xsitype:"*",1:"MDM.WS.EJ.tns.APE"),local=1,savexsiAttrs=xsiAttrs
     Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
   }
 }
 Set val=..buildNum
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"buildNum"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"buildNum>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..changeDateSIREN
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"changeDateSIREN"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"dateTime""",1:"")_">"_$select(val="":"",1:$translate(val," ","T")_"Z")_endprefix_"changeDateSIREN>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..changeReasonSIREN
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"changeReasonSIREN"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"changeReasonSIREN>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..codeFINESSEJ
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"codeFINESSEJ"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"codeFINESSEJ>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..codeSIREN
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"codeSIREN"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"codeSIREN>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..countryCode
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"countryCode"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"countryCode>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..countryName
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"countryName"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"countryName>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..creationType
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"creationType"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"creationType>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..deptCode
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"deptCode"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"deptCode>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..deptName
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"deptName"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"deptName>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..email
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"email"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"email>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..fax
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"fax"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"fax>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..geoInfo
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"geoInfo"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"geoInfo>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..goldenRecord
 If $IsObject(val) , deepFlag {
   Set id=""
   If encoded,'inlineFlag {
     Set temp=$select($parameter("MDM.WS.EJ.tns.EJFinessOcc","XMLSUMMARY")'="":-1,1:1)
     Set id=+$get(idlist(temp*val))
     If 'soap12 , (id=0) Set id=$increment(idlist),oreflist(temp*id)=val,idlist(temp*val)=id
   }
   If +id'=0 {
     Set %xmlmsg=currentIndent_beginprefix_"goldenRecord "_$select(soap12:soapPrefix_"ref=""",1:"href=""#")_"id"_id_""" />" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   } Else { if id=0 Set id=$increment(idlist)
     Set topArg="goldenRecord",summaryArg=1,group=0,createId=$get(id),typeAttr=$select(encoded||xsitype:"*",1:"MDM.WS.EJ.tns.EJFinessOcc"),local=1,savexsiAttrs=xsiAttrs
     Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
   }
 }
 Set val=..houseNum
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"houseNum"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"houseNum>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..mdmId
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"mdmId"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"mdmId>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..info
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"info"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"info>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..jurStatus
 If $IsObject(val) , deepFlag {
   Set id=""
   If encoded,'inlineFlag {
     Set temp=$select($parameter("MDM.WS.EJ.tns.StatutJuridique","XMLSUMMARY")'="":-1,1:1)
     Set id=+$get(idlist(temp*val))
     If 'soap12 , (id=0) Set id=$increment(idlist),oreflist(temp*id)=val,idlist(temp*val)=id
   }
   If +id'=0 {
     Set %xmlmsg=currentIndent_beginprefix_"jurStatus "_$select(soap12:soapPrefix_"ref=""",1:"href=""#")_"id"_id_""" />" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
   } Else { if id=0 Set id=$increment(idlist)
     Set topArg="jurStatus",summaryArg=1,group=0,createId=$get(id),typeAttr=$select(encoded||xsitype:"*",1:"MDM.WS.EJ.tns.StatutJuridique"),local=1,savexsiAttrs=xsiAttrs
     Set sc=val.XMLExportInternal() Goto:'sc XMLExportExit Set xsiAttrs=savexsiAttrs
   }
 }
 Set val=..liquidateDate
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"liquidateDate"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"dateTime""",1:"")_">"_$select(val="":"",1:$translate(val," ","T")_"Z")_endprefix_"liquidateDate>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..liquidateType
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"liquidateType"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"liquidateType>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..locationCode
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"locationCode"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"locationCode>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..locationName
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"locationName"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"locationName>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..locationShortName
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"locationShortName"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"locationShortName>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..mentionDistribution
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"mentionDistribution"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"mentionDistribution>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..orgCategoryCode
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"orgCategoryCode"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"orgCategoryCode>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..orgCategoryName
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"orgCategoryName"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"orgCategoryName>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..orgCategoryShortName
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"orgCategoryShortName"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"orgCategoryShortName>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..orgCreateDate
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"orgCreateDate"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"dateTime""",1:"")_">"_$select(val="":"",1:$translate(val," ","T")_"Z")_endprefix_"orgCreateDate>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..orgFullName
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"orgFullName"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"orgFullName>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..orgName
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"orgName"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"orgName>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..orgNameAdditional
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"orgNameAdditional"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"orgNameAdditional>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..orgPostCode
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"orgPostCode"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"orgPostCode>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..orgUpdateDate
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"orgUpdateDate"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"dateTime""",1:"")_">"_$select(val="":"",1:$translate(val," ","T")_"Z")_endprefix_"orgUpdateDate>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..phon2
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"phon2"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"phon2>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..phone
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"phone"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"phone>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..postalCode
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"postalCode"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"postalCode>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..streetName
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"streetName"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"streetName>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..streetType
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"streetType"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"streetType>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..streetTypeName
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"streetTypeName"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"streetTypeName>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..typologie
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"typologie"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]>","]]]]><![CDATA[>")_"]]>",1:val))_endprefix_"typologie>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 If 'encoded||inlineFlag {
   If 'nocycle Kill oreflist($this)
 } ElseIf $get(oreflist)'=1 {
   Set oreflist=1
   Set id=$order(oreflist(""))
   While id'="" {
     Set val=oreflist(id)
     Kill oreflist(id)
     Set group=0,createId=$zabs(id),typeAttr="*",local=savelocal,xsiAttrs=initialxsiAttrs
     If $classname(val)="MDM.WS.EJ.tns.EJFinessOcc" {
       Set attrsArg=attrsVal
       Set topArg=tag,summaryArg=0
       Set sc=val.XMLExportInternal()
     } Else {
       Set topArg="",summaryArg=(id<0)
       Set sc=val.XMLExportInternal()
     }
     If 'sc Quit
     Set id=$order(oreflist(""))
   }
   Kill oreflist
 }
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes)
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("MDM.WS.EJ.tns.EJFinessOcc",.imports,.classes)
zXMLImportAttributes()
 ;
 Quit 1
XMLImportAttrErr Quit $$Error^%apiOBJ(6260,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportFixedAttrErr Quit $$Error^%apiOBJ(6320,ref,$get(@(tree)@("d",$zlascii(attributeList(ref),13))),@(tree)@("d",$zlascii(nodelist,9))_$$XMLImportAttrLocation(nodelist))
XMLImportAttrLocation(nodelist) new msg,loc
 Set loc=$lb($zlascii(nodelist,21),$zlascii(nodelist,25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
zXMLImportInternal()
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$get(@(tree)@("N","http://kanosoftware.com/soap"))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"MDM.WS.EJ.tns.EJFinessOcc")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
XMLImportExit Quit sc
XMLImportElements() ;
 If $$XMLLOOP1()'=0 Quit sc
 If tag="isDeleted" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$case(data,"true":1,"false":0,1:1,0:0,:"") Goto:data="" XMLImportErrchild Goto:('$s($isvalidnum(data,0,0,2)&&(+data'=2):1,1:$$Error^%apiOBJ(7206,data))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..isDeleted=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="ts" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=..tsXSDToLogical(data) Goto:data="" XMLImportErrchild Goto:('..tsIsValid(data)) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..ts=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="initSystemRecordId" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>250):1,1:$$Error^%apiOBJ(7201,data,250))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..initSystemRecordId=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="dictClassName" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>250):1,1:$$Error^%apiOBJ(7201,data,250))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..dictClassName=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="APE" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     Do XMLImportAttrchild()
     Set class=$select(($zwascii($get(attributeList("type")),9)=1):$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))),1:"")
     If (class="") || (class="APE") {
       Set class="MDM.WS.EJ.tns.APE"
     } Else {
       If $length(class,":")=2 Set class=$piece(class,":",2)
       Set class=$get(^oddCOM("MDM.WS.EJ.tns.APE",85,"s",class))_$get(^oddXML("MDM.WS.EJ.tns.APE","s",class)) If class="" Set class=0
       Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
       If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadTypechild
       If $listlength(class)>1 {
         For tmpi=1:1:$listlength(class) {
           If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
         }
         If tmpi Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadTypechild
       } Else { Set class=$list(class) }
     }
     Set data=$classmethod(class,"XMLNew",handler,child,$this)
     If $isobject(data) Set tag=@(tree)@("d",$zlascii(childlist,9)),nodeArg=child,nodeArgChildlist=childlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   If data'="" Set ..APE=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="buildNum" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..buildNum=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="changeDateSIREN" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=..changeDateSIRENXSDToLogical(data) Goto:data="" XMLImportErrchild Goto:('..changeDateSIRENIsValid(data)) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..changeDateSIREN=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="changeReasonSIREN" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..changeReasonSIREN=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="codeFINESSEJ" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($s(data'=$c(0):$l(data),1:0)'<9)&&($l(data)'>9):1,$s(data'=$c(0):$l(data),1:0)<9:$$Error^%apiOBJ(7202,data,9),1:$$Error^%apiOBJ(7201,data,9))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..codeFINESSEJ=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="codeSIREN" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($s(data'=$c(0):$l(data),1:0)'<9)&&($l(data)'>9):1,$s(data'=$c(0):$l(data),1:0)<9:$$Error^%apiOBJ(7202,data,9),1:$$Error^%apiOBJ(7201,data,9))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..codeSIREN=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="countryCode" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..countryCode=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="countryName" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..countryName=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="creationType" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..creationType=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="deptCode" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..deptCode=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="deptName" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..deptName=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="email" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..email=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="fax" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..fax=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="geoInfo" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..geoInfo=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="goldenRecord" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     Do XMLImportAttrchild()
     Set class=$select(($zwascii($get(attributeList("type")),9)=1):$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))),1:"")
     If (class="") || (class="EJFinessOcc") {
       Set class="MDM.WS.EJ.tns.EJFinessOcc"
     } Else {
       If $length(class,":")=2 Set class=$piece(class,":",2)
       Set class=$get(^oddCOM("MDM.WS.EJ.tns.EJFinessOcc",85,"s",class))_$get(^oddXML("MDM.WS.EJ.tns.EJFinessOcc","s",class)) If class="" Set class=0
       Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
       If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadTypechild
       If $listlength(class)>1 {
         For tmpi=1:1:$listlength(class) {
           If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
         }
         If tmpi Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadTypechild
       } Else { Set class=$list(class) }
     }
     Set data=$classmethod(class,"XMLNew",handler,child,$this)
     If $isobject(data) Set tag=@(tree)@("d",$zlascii(childlist,9)),nodeArg=child,nodeArgChildlist=childlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   If data'="" Set ..goldenRecord=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="houseNum" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..houseNum=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="mdmId" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..mdmId=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="info" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..info=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="jurStatus" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     Do XMLImportAttrchild()
     Set class=$select(($zwascii($get(attributeList("type")),9)=1):$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))),1:"")
     If (class="") || (class="StatutJuridique") {
       Set class="MDM.WS.EJ.tns.StatutJuridique"
     } Else {
       If $length(class,":")=2 Set class=$piece(class,":",2)
       Set class=$get(^oddCOM("MDM.WS.EJ.tns.StatutJuridique",85,"s",class))_$get(^oddXML("MDM.WS.EJ.tns.StatutJuridique","s",class)) If class="" Set class=0
       Set tmp=$get(@(tree)@("n",$zwascii(attributeList("type"),11)))
       If (class=0)||(($listlength(class)>1)&&(tmp="")) Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadTypechild
       If $listlength(class)>1 {
         For tmpi=1:1:$listlength(class) {
           If tmp=$parameter($list(class,tmpi),"NAMESPACE") Set class=$list(class,tmpi),tmpi=0 Quit
         }
         If tmpi Set class=$case($data(@(tree)@("d",$zlascii(attributeList("type"),13))),1:@(tree)@("d",$zlascii(attributeList("type"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("type"))) Goto XMLImportBadTypechild
       } Else { Set class=$list(class) }
     }
     Set data=$classmethod(class,"XMLNew",handler,child,$this)
     If $isobject(data) Set tag=@(tree)@("d",$zlascii(childlist,9)),nodeArg=child,nodeArgChildlist=childlist,bareProjection=0,summaryArg=1,keynameattr="",sc=data.XMLImportInternal() Goto:('sc) XMLImportExit
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   If data'="" Set ..jurStatus=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="liquidateDate" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=..liquidateDateXSDToLogical(data) Goto:data="" XMLImportErrchild Goto:('..liquidateDateIsValid(data)) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..liquidateDate=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="liquidateType" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..liquidateType=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="locationCode" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..locationCode=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="locationName" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..locationName=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="locationShortName" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..locationShortName=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="mentionDistribution" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..mentionDistribution=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="orgCategoryCode" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..orgCategoryCode=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="orgCategoryName" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..orgCategoryName=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="orgCategoryShortName" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..orgCategoryShortName=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="orgCreateDate" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=..orgCreateDateXSDToLogical(data) Goto:data="" XMLImportErrchild Goto:('..orgCreateDateIsValid(data)) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..orgCreateDate=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="orgFullName" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..orgFullName=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="orgName" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..orgName=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="orgNameAdditional" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..orgNameAdditional=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="orgPostCode" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..orgPostCode=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="orgUpdateDate" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=..orgUpdateDateXSDToLogical(data) Goto:data="" XMLImportErrchild Goto:('..orgUpdateDateIsValid(data)) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..orgUpdateDate=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="phon2" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..phon2=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="phone" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..phone=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="postalCode" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($s(data'=$c(0):$l(data),1:0)'<5)&&($l(data)'>5):1,$s(data'=$c(0):$l(data),1:0)<5:$$Error^%apiOBJ(7202,data,5),1:$$Error^%apiOBJ(7201,data,5))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..postalCode=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="streetName" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..streetName=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="streetType" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..streetType=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="streetTypeName" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..streetTypeName=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 If tag="typologie" {
   If $case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data="" Set data=$c(0)
             If data'="" Goto:('$s(($l(data)'>255):1,1:$$Error^%apiOBJ(7201,data,255))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..typologie=data
   If $$XMLLOOP()'=0 Goto XMLImportExit } }
 Goto XMLImportBadTagchild
XMLLOOP1() Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP() For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 Quit 0
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("href"),13))),1:@(tree)@("d",$zlascii(attributeList("href"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("href")))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("ref"),13))),1:@(tree)@("d",$zlascii(attributeList("ref"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("ref")))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLIsObjectEmpty(ignoreNull)
 If ..isDeleted'="" Quit 0
 If ..ts'="" Quit 0
 If ..initSystemRecordId'="" Quit 0
 If ..dictClassName'="" Quit 0
 If $IsObject(..APE) Quit 0
 If ..buildNum'="" Quit 0
 If ..changeDateSIREN'="" Quit 0
 If ..changeReasonSIREN'="" Quit 0
 If ..codeFINESSEJ'="" Quit 0
 If ..codeSIREN'="" Quit 0
 If ..countryCode'="" Quit 0
 If ..countryName'="" Quit 0
 If ..creationType'="" Quit 0
 If ..deptCode'="" Quit 0
 If ..deptName'="" Quit 0
 If ..email'="" Quit 0
 If ..fax'="" Quit 0
 If ..geoInfo'="" Quit 0
 If $IsObject(..goldenRecord) Quit 0
 If ..houseNum'="" Quit 0
 If ..mdmId'="" Quit 0
 If ..info'="" Quit 0
 If $IsObject(..jurStatus) Quit 0
 If ..liquidateDate'="" Quit 0
 If ..liquidateType'="" Quit 0
 If ..locationCode'="" Quit 0
 If ..locationName'="" Quit 0
 If ..locationShortName'="" Quit 0
 If ..mentionDistribution'="" Quit 0
 If ..orgCategoryCode'="" Quit 0
 If ..orgCategoryName'="" Quit 0
 If ..orgCategoryShortName'="" Quit 0
 If ..orgCreateDate'="" Quit 0
 If ..orgFullName'="" Quit 0
 If ..orgName'="" Quit 0
 If ..orgNameAdditional'="" Quit 0
 If ..orgPostCode'="" Quit 0
 If ..orgUpdateDate'="" Quit 0
 If ..phon2'="" Quit 0
 If ..phone'="" Quit 0
 If ..postalCode'="" Quit 0
 If ..streetName'="" Quit 0
 If ..streetType'="" Quit 0
 If ..streetTypeName'="" Quit 0
 If ..typologie'="" Quit 0
 Quit 1
zXMLNew(document,node,containerOref="")
	Quit (##class(MDM.WS.EJ.tns.EJFinessOcc).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema)
 Quit ##class(%XML.Implementation).XMLSchema("MDM.WS.EJ.tns.EJFinessOcc",top,format,namespacePrefix,input,refOnly,.schema)
zAPEGetObject(force=0) public {
	Quit $select(r%APE=""||(i%APE'=""):$select(i%APE="":"",1:$listbuild(i%APE_"")),(''..APE.%GetSwizzleObject(force,.oid)):oid,1:"") }
zAPEGetObjectId(force=0) public {
	Quit $listget(..APEGetObject(force)) }
zAPEGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),6),1:"") }
zAPEGetSwizzled(noswizzle=0) public {
	If noswizzle Quit r%APE
	If i%APE="" Quit ""
	Set oref=##class(MDM.WS.EJ.tns.APE).%Open($select(i%APE="":"",1:$listbuild(i%APE_"")),,.sc) If ('sc) Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%APE=oref Do $system.CLS.SetModifiedBits(modstate)
	Quit oref }
zAPENewObject() public {
	Set newobject=##class(MDM.WS.EJ.tns.APE).%New() If newobject="" Quit ""
	Set ..APE=newobject
	Quit newobject }
zAPESetObject(newvalue) public {
	If newvalue'="",$data(i%APE,tmp),tmp=$listget(newvalue) Quit 1
	Set i%APE=$listget(newvalue),r%APE=0,r%APE=""
	Quit 1 }
zAPESetObjectId(newid) public {
	Quit ..APESetObject($select(newid="":"",1:$listbuild(newid_""))) }
zAPEUnSwizzle(force=0) public {
	If r%APE="" Quit 1
	Set sc=..APE.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%APE="" Do $system.CLS.SetModifiedBits(modstate)
	Set i%APE=$listget(newvalue)
	Quit 1 }
zbuildNumGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),7),1:"") }
zchangeDateSIRENGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),8),1:"") }
zchangeDateSIRENIsValid(%val) public {
	RETURN:$zu(115,13)&&(%val=$c(0)) 1
	Set val=%val,%val=$select(%val=(%val\1):$zdate(%val,3,,,,,0,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3,,,,,0)_" "_%val,$length(%val)=10:%val_" 00:00:00",1:%val)
	Quit:($length(%val)<19||($zdatetimeh(%val,3,,,,,,0,,"")="")) $$Error^%apiOBJ(7208,val)
	Quit 1 }
zchangeDateSIRENLogicalToXSD(%val) public {
	Quit $select(%val="":"",1:$translate(%val," ","T")_"Z") }
zchangeDateSIRENNormalize(%val) public {
	Quit $s(%val="":"",$zu(115,13)&&(%val=$c(0)):"",%val=(%val\1):$zdate(%val,3,,,,,-672045,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3)_" "_%val,$l(%val)=10:%val_" 00:00:00",$zdatetimeh(%val,3,,,,,,-672045,,"")="":"error",1:$zdatetime($zdatetimeh($p(%val,"."),3,,,,,,-672045,,""),3,,,,,,,-672045)_$s(+$p(%val,".",2)=0:"",1:+("."_$e($p(%val,".",2),1,9)))) }
zchangeDateSIRENOdbcToLogical(%val) public {
	Quit:%val="" ""
	If $zdatetimeh(%val,3,,,,,,-672045,,"")'="" {
		Set %val=$zdatetime($zdatetimeh(%val,3,,,,,,-672045),3,,$l($p(%val,".",2)),,,,,-672045)
	} elseif $zdatetimeh(%val,-1,,,,,,-672045,,"")'="" {
		Set %val=$zdatetime($zdatetimeh(%val,-1,,,,,,-672045),3,,$l($p(%val,".",2)),,,,,-672045)
	}
	Quit $s(%val'[".":%val,1:$zstrip($zstrip(%val,">","0"),">",".")) }
zchangeDateSIRENXSDToLogical(%val) public {
	If $length($get(%val),"T")'=2 Quit ""
	Set dt=$translate(%val,"T"," ")
	Set len=$length(%val)
	If $extract(%val,len)="Z" {
		Set dt=$extract(dt,1,len-1)
	} ElseIf $case($extract(%val,len-5),"+":1,"-":1,:0) {
		If $extract(%val,len-2)'=":" Quit ""
		Set dt=$extract(dt,1,len-6)
		Set f=$piece(dt,".",2) If f'="" Set f="."_f,dt=$piece(dt,".")
		Set t=$zdatetimeh(dt,3,1,,,,,0,,"") If t="" Quit ""
		Set d=$piece(t,",")
		Set s=$piece(t,",",2)
		Set z=($extract(%val,len-4,len-3)*60+$extract(%val,len-1,len))*60
		If $extract(%val,len-5)="-" {
			Set s=s+z
			If s>=(24*60*60) Set d=d+1,s=s-(24*60*60)
		} Else {
			Set s=s-z
			If s<0 Set d=d-1,s=s+(24*60*60)
		}
		Set dt=$zdatetime(d_","_s,3,1,0,,,,,0,,"")
		Quit $select(dt="":"",1:dt_f)
	}
	If $zdatetimeh(dt,3,1,,,,,0,,"")="" Quit ""
	Quit dt }
zchangeReasonSIRENGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),9),1:"") }
zcodeFINESSEJGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),10),1:"") }
zcodeFINESSEJIsValid(%val) public {
	Q $s(($s(%val'=$c(0):$l(%val),1:0)'<9)&&($l(%val)'>9):1,$s(%val'=$c(0):$l(%val),1:0)<9:$$Error^%apiOBJ(7202,%val,9),1:$$Error^%apiOBJ(7201,%val,9)) }
zcodeSIRENGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),11),1:"") }
zcodeSIRENIsValid(%val) public {
	Q $s(($s(%val'=$c(0):$l(%val),1:0)'<9)&&($l(%val)'>9):1,$s(%val'=$c(0):$l(%val),1:0)<9:$$Error^%apiOBJ(7202,%val,9),1:$$Error^%apiOBJ(7201,%val,9)) }
zcountryCodeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),12),1:"") }
zcountryNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),13),1:"") }
zcreationTypeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),14),1:"") }
zdeptCodeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),15),1:"") }
zdeptNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),16),1:"") }
zdictClassNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),5),1:"") }
zemailGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),17),1:"") }
zfaxGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),18),1:"") }
zgeoInfoGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),19),1:"") }
zgoldenRecordGetObject(force=0) public {
	Quit $select(r%goldenRecord=""||(i%goldenRecord'=""):$select(i%goldenRecord="":"",1:$listbuild(i%goldenRecord_"")),(''..goldenRecord.%GetSwizzleObject(force,.oid)):oid,1:"") }
zgoldenRecordGetObjectId(force=0) public {
	Quit $listget(..goldenRecordGetObject(force)) }
zgoldenRecordGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),20),1:"") }
zgoldenRecordGetSwizzled(noswizzle=0) public {
	If noswizzle Quit r%goldenRecord
	If i%goldenRecord="" Quit ""
	Set oref=##class(MDM.WS.EJ.tns.EJFinessOcc).%Open($select(i%goldenRecord="":"",1:$listbuild(i%goldenRecord_"")),,.sc) If ('sc) Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%goldenRecord=oref Do $system.CLS.SetModifiedBits(modstate)
	Quit oref }
zgoldenRecordNewObject() public {
	Set newobject=##class(MDM.WS.EJ.tns.EJFinessOcc).%New() If newobject="" Quit ""
	Set ..goldenRecord=newobject
	Quit newobject }
zgoldenRecordSetObject(newvalue) public {
	If newvalue'="",$data(i%goldenRecord,tmp),tmp=$listget(newvalue) Quit 1
	Set i%goldenRecord=$listget(newvalue),r%goldenRecord=0,r%goldenRecord=""
	Quit 1 }
zgoldenRecordSetObjectId(newid) public {
	Quit ..goldenRecordSetObject($select(newid="":"",1:$listbuild(newid_""))) }
zgoldenRecordUnSwizzle(force=0) public {
	If r%goldenRecord="" Quit 1
	Set sc=..goldenRecord.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%goldenRecord="" Do $system.CLS.SetModifiedBits(modstate)
	Set i%goldenRecord=$listget(newvalue)
	Quit 1 }
zhouseNumGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),21),1:"") }
zinfoGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),23),1:"") }
zinitSystemRecordIdGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),4),1:"") }
zisDeletedDisplayToLogical(%val) public {
	Quit $s(%val="":"",1:''%val) }
zisDeletedGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),2),1:"") }
zisDeletedIsValid(%val="") public {
	Q $s($isvalidnum(%val,0,0,2)&&(+%val'=2):1,1:$$Error^%apiOBJ(7206,%val)) }
zisDeletedLogicalToXSD(%val) public {
	Q $s(%val:"true",1:"false") }
zisDeletedNormalize(%val) public {
	Quit $s(%val="":"",1:%val\1) }
zisDeletedXSDToLogical(%val) public {
	Q $case(%val,"true":1,"false":0,1:1,0:0,:"") }
zjurStatusGetObject(force=0) public {
	Quit $select(r%jurStatus=""||(i%jurStatus'=""):$select(i%jurStatus="":"",1:$listbuild(i%jurStatus_"")),(''..jurStatus.%GetSwizzleObject(force,.oid)):oid,1:"") }
zjurStatusGetObjectId(force=0) public {
	Quit $listget(..jurStatusGetObject(force)) }
zjurStatusGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),24),1:"") }
zjurStatusGetSwizzled(noswizzle=0) public {
	If noswizzle Quit r%jurStatus
	If i%jurStatus="" Quit ""
	Set oref=##class(MDM.WS.EJ.tns.StatutJuridique).%Open($select(i%jurStatus="":"",1:$listbuild(i%jurStatus_"")),,.sc) If ('sc) Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1) Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%jurStatus=oref Do $system.CLS.SetModifiedBits(modstate)
	Quit oref }
zjurStatusNewObject() public {
	Set newobject=##class(MDM.WS.EJ.tns.StatutJuridique).%New() If newobject="" Quit ""
	Set ..jurStatus=newobject
	Quit newobject }
zjurStatusSetObject(newvalue) public {
	If newvalue'="",$data(i%jurStatus,tmp),tmp=$listget(newvalue) Quit 1
	Set i%jurStatus=$listget(newvalue),r%jurStatus=0,r%jurStatus=""
	Quit 1 }
zjurStatusSetObjectId(newid) public {
	Quit ..jurStatusSetObject($select(newid="":"",1:$listbuild(newid_""))) }
zjurStatusUnSwizzle(force=0) public {
	If r%jurStatus="" Quit 1
	Set sc=..jurStatus.%GetSwizzleObject(force,.newvalue) Quit:('sc) sc
	Set modstate=$system.CLS.GetModifiedBits() Set r%jurStatus="" Do $system.CLS.SetModifiedBits(modstate)
	Set i%jurStatus=$listget(newvalue)
	Quit 1 }
zliquidateDateGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),25),1:"") }
zliquidateDateIsValid(%val) public {
	RETURN:$zu(115,13)&&(%val=$c(0)) 1
	Set val=%val,%val=$select(%val=(%val\1):$zdate(%val,3,,,,,0,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3,,,,,0)_" "_%val,$length(%val)=10:%val_" 00:00:00",1:%val)
	Quit:($length(%val)<19||($zdatetimeh(%val,3,,,,,,0,,"")="")) $$Error^%apiOBJ(7208,val)
	Quit 1 }
zliquidateDateLogicalToXSD(%val) public {
	Quit $select(%val="":"",1:$translate(%val," ","T")_"Z") }
zliquidateDateNormalize(%val) public {
	Quit $s(%val="":"",$zu(115,13)&&(%val=$c(0)):"",%val=(%val\1):$zdate(%val,3,,,,,-672045,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3)_" "_%val,$l(%val)=10:%val_" 00:00:00",$zdatetimeh(%val,3,,,,,,-672045,,"")="":"error",1:$zdatetime($zdatetimeh($p(%val,"."),3,,,,,,-672045,,""),3,,,,,,,-672045)_$s(+$p(%val,".",2)=0:"",1:+("."_$e($p(%val,".",2),1,9)))) }
zliquidateDateOdbcToLogical(%val) public {
	Quit:%val="" ""
	If $zdatetimeh(%val,3,,,,,,-672045,,"")'="" {
		Set %val=$zdatetime($zdatetimeh(%val,3,,,,,,-672045),3,,$l($p(%val,".",2)),,,,,-672045)
	} elseif $zdatetimeh(%val,-1,,,,,,-672045,,"")'="" {
		Set %val=$zdatetime($zdatetimeh(%val,-1,,,,,,-672045),3,,$l($p(%val,".",2)),,,,,-672045)
	}
	Quit $s(%val'[".":%val,1:$zstrip($zstrip(%val,">","0"),">",".")) }
zliquidateDateXSDToLogical(%val) public {
	If $length($get(%val),"T")'=2 Quit ""
	Set dt=$translate(%val,"T"," ")
	Set len=$length(%val)
	If $extract(%val,len)="Z" {
		Set dt=$extract(dt,1,len-1)
	} ElseIf $case($extract(%val,len-5),"+":1,"-":1,:0) {
		If $extract(%val,len-2)'=":" Quit ""
		Set dt=$extract(dt,1,len-6)
		Set f=$piece(dt,".",2) If f'="" Set f="."_f,dt=$piece(dt,".")
		Set t=$zdatetimeh(dt,3,1,,,,,0,,"") If t="" Quit ""
		Set d=$piece(t,",")
		Set s=$piece(t,",",2)
		Set z=($extract(%val,len-4,len-3)*60+$extract(%val,len-1,len))*60
		If $extract(%val,len-5)="-" {
			Set s=s+z
			If s>=(24*60*60) Set d=d+1,s=s-(24*60*60)
		} Else {
			Set s=s-z
			If s<0 Set d=d-1,s=s+(24*60*60)
		}
		Set dt=$zdatetime(d_","_s,3,1,0,,,,,0,,"")
		Quit $select(dt="":"",1:dt_f)
	}
	If $zdatetimeh(dt,3,1,,,,,0,,"")="" Quit ""
	Quit dt }
zliquidateTypeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),26),1:"") }
zlocationCodeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),27),1:"") }
zlocationNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),28),1:"") }
zlocationShortNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),29),1:"") }
zmdmIdDisplayToLogical(%val) public {
	Q $select(%val="":"",%val=$c(0)&&$zu(115,13):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
zmdmIdGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),22),1:"") }
zmdmIdIsValid(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):1,$isvalidnum(%val,0):1,1:$$Error^%apiOBJ(7207,%val)) }
zmdmIdNormalize(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):"",1:%val\1) }
zmdmIdXSDToLogical(%val) public {
	Q $s($tr(%val,"Ee(),.")'=%val:"",1:$number(%val,"I")) }
zmentionDistributionGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),30),1:"") }
zorgCategoryCodeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),31),1:"") }
zorgCategoryNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),32),1:"") }
zorgCategoryShortNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),33),1:"") }
zorgCreateDateGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),34),1:"") }
zorgCreateDateIsValid(%val) public {
	RETURN:$zu(115,13)&&(%val=$c(0)) 1
	Set val=%val,%val=$select(%val=(%val\1):$zdate(%val,3,,,,,0,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3,,,,,0)_" "_%val,$length(%val)=10:%val_" 00:00:00",1:%val)
	Quit:($length(%val)<19||($zdatetimeh(%val,3,,,,,,0,,"")="")) $$Error^%apiOBJ(7208,val)
	Quit 1 }
zorgCreateDateLogicalToXSD(%val) public {
	Quit $select(%val="":"",1:$translate(%val," ","T")_"Z") }
zorgCreateDateNormalize(%val) public {
	Quit $s(%val="":"",$zu(115,13)&&(%val=$c(0)):"",%val=(%val\1):$zdate(%val,3,,,,,-672045,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3)_" "_%val,$l(%val)=10:%val_" 00:00:00",$zdatetimeh(%val,3,,,,,,-672045,,"")="":"error",1:$zdatetime($zdatetimeh($p(%val,"."),3,,,,,,-672045,,""),3,,,,,,,-672045)_$s(+$p(%val,".",2)=0:"",1:+("."_$e($p(%val,".",2),1,9)))) }
zorgCreateDateOdbcToLogical(%val) public {
	Quit:%val="" ""
	If $zdatetimeh(%val,3,,,,,,-672045,,"")'="" {
		Set %val=$zdatetime($zdatetimeh(%val,3,,,,,,-672045),3,,$l($p(%val,".",2)),,,,,-672045)
	} elseif $zdatetimeh(%val,-1,,,,,,-672045,,"")'="" {
		Set %val=$zdatetime($zdatetimeh(%val,-1,,,,,,-672045),3,,$l($p(%val,".",2)),,,,,-672045)
	}
	Quit $s(%val'[".":%val,1:$zstrip($zstrip(%val,">","0"),">",".")) }
zorgCreateDateXSDToLogical(%val) public {
	If $length($get(%val),"T")'=2 Quit ""
	Set dt=$translate(%val,"T"," ")
	Set len=$length(%val)
	If $extract(%val,len)="Z" {
		Set dt=$extract(dt,1,len-1)
	} ElseIf $case($extract(%val,len-5),"+":1,"-":1,:0) {
		If $extract(%val,len-2)'=":" Quit ""
		Set dt=$extract(dt,1,len-6)
		Set f=$piece(dt,".",2) If f'="" Set f="."_f,dt=$piece(dt,".")
		Set t=$zdatetimeh(dt,3,1,,,,,0,,"") If t="" Quit ""
		Set d=$piece(t,",")
		Set s=$piece(t,",",2)
		Set z=($extract(%val,len-4,len-3)*60+$extract(%val,len-1,len))*60
		If $extract(%val,len-5)="-" {
			Set s=s+z
			If s>=(24*60*60) Set d=d+1,s=s-(24*60*60)
		} Else {
			Set s=s-z
			If s<0 Set d=d-1,s=s+(24*60*60)
		}
		Set dt=$zdatetime(d_","_s,3,1,0,,,,,0,,"")
		Quit $select(dt="":"",1:dt_f)
	}
	If $zdatetimeh(dt,3,1,,,,,0,,"")="" Quit ""
	Quit dt }
zorgFullNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),35),1:"") }
zorgNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),36),1:"") }
zorgNameAdditionalGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),37),1:"") }
zorgPostCodeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),38),1:"") }
zorgUpdateDateGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),39),1:"") }
zorgUpdateDateIsValid(%val) public {
	RETURN:$zu(115,13)&&(%val=$c(0)) 1
	Set val=%val,%val=$select(%val=(%val\1):$zdate(%val,3,,,,,0,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3,,,,,0)_" "_%val,$length(%val)=10:%val_" 00:00:00",1:%val)
	Quit:($length(%val)<19||($zdatetimeh(%val,3,,,,,,0,,"")="")) $$Error^%apiOBJ(7208,val)
	Quit 1 }
zorgUpdateDateLogicalToXSD(%val) public {
	Quit $select(%val="":"",1:$translate(%val," ","T")_"Z") }
zorgUpdateDateNormalize(%val) public {
	Quit $s(%val="":"",$zu(115,13)&&(%val=$c(0)):"",%val=(%val\1):$zdate(%val,3,,,,,-672045,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3)_" "_%val,$l(%val)=10:%val_" 00:00:00",$zdatetimeh(%val,3,,,,,,-672045,,"")="":"error",1:$zdatetime($zdatetimeh($p(%val,"."),3,,,,,,-672045,,""),3,,,,,,,-672045)_$s(+$p(%val,".",2)=0:"",1:+("."_$e($p(%val,".",2),1,9)))) }
zorgUpdateDateOdbcToLogical(%val) public {
	Quit:%val="" ""
	If $zdatetimeh(%val,3,,,,,,-672045,,"")'="" {
		Set %val=$zdatetime($zdatetimeh(%val,3,,,,,,-672045),3,,$l($p(%val,".",2)),,,,,-672045)
	} elseif $zdatetimeh(%val,-1,,,,,,-672045,,"")'="" {
		Set %val=$zdatetime($zdatetimeh(%val,-1,,,,,,-672045),3,,$l($p(%val,".",2)),,,,,-672045)
	}
	Quit $s(%val'[".":%val,1:$zstrip($zstrip(%val,">","0"),">",".")) }
zorgUpdateDateXSDToLogical(%val) public {
	If $length($get(%val),"T")'=2 Quit ""
	Set dt=$translate(%val,"T"," ")
	Set len=$length(%val)
	If $extract(%val,len)="Z" {
		Set dt=$extract(dt,1,len-1)
	} ElseIf $case($extract(%val,len-5),"+":1,"-":1,:0) {
		If $extract(%val,len-2)'=":" Quit ""
		Set dt=$extract(dt,1,len-6)
		Set f=$piece(dt,".",2) If f'="" Set f="."_f,dt=$piece(dt,".")
		Set t=$zdatetimeh(dt,3,1,,,,,0,,"") If t="" Quit ""
		Set d=$piece(t,",")
		Set s=$piece(t,",",2)
		Set z=($extract(%val,len-4,len-3)*60+$extract(%val,len-1,len))*60
		If $extract(%val,len-5)="-" {
			Set s=s+z
			If s>=(24*60*60) Set d=d+1,s=s-(24*60*60)
		} Else {
			Set s=s-z
			If s<0 Set d=d-1,s=s+(24*60*60)
		}
		Set dt=$zdatetime(d_","_s,3,1,0,,,,,0,,"")
		Quit $select(dt="":"",1:dt_f)
	}
	If $zdatetimeh(dt,3,1,,,,,0,,"")="" Quit ""
	Quit dt }
zphon2GetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),40),1:"") }
zphoneGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),41),1:"") }
zpostalCodeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),42),1:"") }
zpostalCodeIsValid(%val) public {
	Q $s(($s(%val'=$c(0):$l(%val),1:0)'<5)&&($l(%val)'>5):1,$s(%val'=$c(0):$l(%val),1:0)<5:$$Error^%apiOBJ(7202,%val,5),1:$$Error^%apiOBJ(7201,%val,5)) }
zstreetNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),43),1:"") }
zstreetTypeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),44),1:"") }
zstreetTypeNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),45),1:"") }
ztsGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),3),1:"") }
ztsIsValid(%val) public {
	RETURN:$zu(115,13)&&(%val=$c(0)) 1
	Set val=%val,%val=$select(%val=(%val\1):$zdate(%val,3,,,,,0,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3,,,,,0)_" "_%val,$length(%val)=10:%val_" 00:00:00",1:%val)
	Quit:($length(%val)<19||($zdatetimeh(%val,3,,,,,,0,,"")="")) $$Error^%apiOBJ(7208,val)
	Quit 1 }
ztsLogicalToXSD(%val) public {
	Quit $select(%val="":"",1:$translate(%val," ","T")_"Z") }
ztsNormalize(%val) public {
	Quit $s(%val="":"",$zu(115,13)&&(%val=$c(0)):"",%val=(%val\1):$zdate(%val,3,,,,,-672045,,"error")_" 00:00:00",%val?1.2N1":"2N1":"2N.1(1"."1.N):$zdate($h,3)_" "_%val,$l(%val)=10:%val_" 00:00:00",$zdatetimeh(%val,3,,,,,,-672045,,"")="":"error",1:$zdatetime($zdatetimeh($p(%val,"."),3,,,,,,-672045,,""),3,,,,,,,-672045)_$s(+$p(%val,".",2)=0:"",1:+("."_$e($p(%val,".",2),1,9)))) }
ztsOdbcToLogical(%val) public {
	Quit:%val="" ""
	If $zdatetimeh(%val,3,,,,,,-672045,,"")'="" {
		Set %val=$zdatetime($zdatetimeh(%val,3,,,,,,-672045),3,,$l($p(%val,".",2)),,,,,-672045)
	} elseif $zdatetimeh(%val,-1,,,,,,-672045,,"")'="" {
		Set %val=$zdatetime($zdatetimeh(%val,-1,,,,,,-672045),3,,$l($p(%val,".",2)),,,,,-672045)
	}
	Quit $s(%val'[".":%val,1:$zstrip($zstrip(%val,">","0"),">",".")) }
ztsXSDToLogical(%val) public {
	If $length($get(%val),"T")'=2 Quit ""
	Set dt=$translate(%val,"T"," ")
	Set len=$length(%val)
	If $extract(%val,len)="Z" {
		Set dt=$extract(dt,1,len-1)
	} ElseIf $case($extract(%val,len-5),"+":1,"-":1,:0) {
		If $extract(%val,len-2)'=":" Quit ""
		Set dt=$extract(dt,1,len-6)
		Set f=$piece(dt,".",2) If f'="" Set f="."_f,dt=$piece(dt,".")
		Set t=$zdatetimeh(dt,3,1,,,,,0,,"") If t="" Quit ""
		Set d=$piece(t,",")
		Set s=$piece(t,",",2)
		Set z=($extract(%val,len-4,len-3)*60+$extract(%val,len-1,len))*60
		If $extract(%val,len-5)="-" {
			Set s=s+z
			If s>=(24*60*60) Set d=d+1,s=s-(24*60*60)
		} Else {
			Set s=s-z
			If s<0 Set d=d-1,s=s+(24*60*60)
		}
		Set dt=$zdatetime(d_","_s,3,1,0,,,,,0,,"")
		Quit $select(dt="":"",1:dt_f)
	}
	If $zdatetimeh(dt,3,1,,,,,0,,"")="" Quit ""
	Quit dt }
ztypologieGetStored(id) public {
	Quit $Select(id'="":$listget($g(^MDM.WS.EJ.tns.EJFinessOccD(id)),46),1:"") }
zExtentClose(%qHandle) [ SQLCODE ] public {
	New SQLCODE
	Do %qHandle.%Destruct() Kill %qHandle
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Quit sc }
zExtentExecute(%qHandle) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM MDM_WS_EJ_tns.EJFinessOcc)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	try { if $g(%qHandle)'="" { s SQLCODE=-101 } else { s %qHandle=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE2ysZ6cg2yZzwYEkY6sNbIKkCXy","%New") if '$isobject(%qHandle) s %qHandle=$$%0dsqlD() } } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE2ysZ6cg2yZzwYEkY6sNbIKkCXy")||($ze["<ZSQLU>") { s %qHandle=$$%0dsqlD() } else { throw } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		RETURN:$zobjexport(row,60)
	}
	RETURN }
 q
%0dsqlD()	n %xxsql
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM MDM_WS_EJ_tns . EJFinessOcc"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("I","%callout")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%systemInclude")="",%xxsql("I","%xmlMap")="",%xxsql("NS")="IRISAPP",%xxsql("PTools")="-1:0:0::0:1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","MDM.WS.EJ.tns",0,"",),",1,QExtent,","MDM.WS.EJ.tns.EJFinessOcc.CLS",1)
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM MDM_WS_EJ_tns . EJFinessOcc")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=""
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:""))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=""
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=""
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","EJFinessOcc","MDM_WS_EJ_tns","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	Set colinfo=$li(metadata,2,2+cmdlen)
	Quit 1 }
zIDKEYCheck(K1,lockonly=0,concurrency=-1) public {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..%ExistsId(id) d:concurrency ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
zIDKEYDelete(K1,concurrency=-1) public {
	Quit ..%DeleteId(.K1,concurrency) }
zIDKEYExists(K1,id="") public {
	s id=K1 q ..%ExistsId(K1) }
zIDKEYOpen(K1,concurrency=-1,sc) public { s:'($d(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	if pLockOnly>=0 { new id set id=%pVal(1) }
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"MDM_WS_EJ_tns"_"."_"EJFinessOcc"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^MDM.WS.EJ.tns.EJFinessOccD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindPKeyByConstraint(%con)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
%sqllistUCQ(t) public	{
	s t("%0dsqlA")="",t("%0dsqlD")=""
}