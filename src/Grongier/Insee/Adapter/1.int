ROUTINE Grongier.Insee.Adapter.1 [Type=INT,Generated]
 ;Grongier.Insee.Adapter.1
 ;Generated for class Grongier.Insee.Adapter.  Do NOT edit. 09/08/2020 03:10:43PM
 ;;6B693661;Grongier.Insee.Adapter
 ;
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) public {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..%CredentialsObj
 s proporef=..%HttpRequest
 s proporef=..BusinessHost
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/3
 s proporef=..%CredentialsObj
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..%HttpRequest
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
 s proporef=..BusinessHost
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
   Quit sc }
%Construct(initvalue) public {
	Set i%%WarnedLatest=0,i%ConnectTimeout=5,i%Credentials="None",i%HTTPServer="api.insee.fr",i%KeepaliveInterval=0,i%ProxyHttpTunnel=0
	Set i%ResponseTimeout=30,i%SSLCheckServerIdentity=1,i%SSLConfig="Insee",i%SkipBodyAttrs="*",i%URL="/entreprises/sirene/V3",i%UseCookies=0
	Set i%WriteTimeout=-1
	Kill i%%Cookies
	Quit 1 }
%ConstructCloneInit(object,deep=0,cloned,location) public {
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(..%CredentialsObj)=1 Set r%%CredentialsObj=r%%CredentialsObj.%ConstructClone(1,.cloned),i%%CredentialsObj=""
		If $isobject(..%HttpRequest)=1 Set r%%HttpRequest=r%%HttpRequest.%ConstructClone(1,.cloned),i%%HttpRequest=""
		If $isobject(..BusinessHost)=1 Set r%BusinessHost=r%BusinessHost.%ConstructClone(1,.cloned),i%BusinessHost=""
	}
	Quit 1 }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%%WarnedLatest Set:i%%WarnedLatest'="" i%%WarnedLatest=(..%WarnedLatestNormalize(i%%WarnedLatest))
	If m%ConnectTimeout Set:i%ConnectTimeout'="" i%ConnectTimeout=(..ConnectTimeoutNormalize(i%ConnectTimeout))
	If m%Credentials Set:i%Credentials'="" i%Credentials=(..CredentialsNormalize(i%Credentials))
	If m%HTTPPort Set:i%HTTPPort'="" i%HTTPPort=(..HTTPPortNormalize(i%HTTPPort))
	If m%HTTPServer Set:i%HTTPServer'="" i%HTTPServer=(..HTTPServerNormalize(i%HTTPServer))
	If m%InseeToken Set:i%InseeToken'="" i%InseeToken=(..InseeTokenNormalize(i%InseeToken))
	If m%KeepaliveInterval Set:i%KeepaliveInterval'="" i%KeepaliveInterval=(..KeepaliveIntervalNormalize(i%KeepaliveInterval))
	If m%LocalInterface Set:i%LocalInterface'="" i%LocalInterface=(..LocalInterfaceNormalize(i%LocalInterface))
	If m%ProxyHTTPS Set:i%ProxyHTTPS'="" i%ProxyHTTPS=(..ProxyHTTPSNormalize(i%ProxyHTTPS))
	If m%ProxyHttpTunnel Set:i%ProxyHttpTunnel'="" i%ProxyHttpTunnel=(..ProxyHttpTunnelNormalize(i%ProxyHttpTunnel))
	If m%ProxyPort Set:i%ProxyPort'="" i%ProxyPort=(..ProxyPortNormalize(i%ProxyPort))
	If m%ProxyServer Set:i%ProxyServer'="" i%ProxyServer=(..ProxyServerNormalize(i%ProxyServer))
	If m%RegistryID Set:i%RegistryID'="" i%RegistryID=(..RegistryIDNormalize(i%RegistryID))
	If m%ResponseTimeout Set:i%ResponseTimeout'="" i%ResponseTimeout=(..ResponseTimeoutNormalize(i%ResponseTimeout))
	If m%SSLCheckServerIdentity Set:i%SSLCheckServerIdentity'="" i%SSLCheckServerIdentity=(..SSLCheckServerIdentityNormalize(i%SSLCheckServerIdentity))
	If m%SSLConfig Set:i%SSLConfig'="" i%SSLConfig=(..SSLConfigNormalize(i%SSLConfig))
	If m%SkipBodyAttrs Set:i%SkipBodyAttrs'="" i%SkipBodyAttrs=(..SkipBodyAttrsNormalize(i%SkipBodyAttrs))
	If m%URL Set:i%URL'="" i%URL=(..URLNormalize(i%URL))
	If m%UseCookies Set:i%UseCookies'="" i%UseCookies=(..UseCookiesNormalize(i%UseCookies))
	If m%WriteTimeout Set:i%WriteTimeout'="" i%WriteTimeout=(..WriteTimeoutNormalize(i%WriteTimeout))
	Quit 1 }
%SerializeObject(serial,partial=0) public {
	try {
		Set sc=..%ValidateObject(,0) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set sc=..%NormalizeObject() Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		If r%%CredentialsObj'="" { Set:'$data(%objTX(0,+r%%CredentialsObj)) %objTX(0,+r%%CredentialsObj)=$i(%objTX(1)),%objTX(1,%objTX(0,+r%%CredentialsObj))=r%%CredentialsObj,%objTX(1,%objTX(0,+r%%CredentialsObj),1)=..%CredentialsObjGetObject(1),%objTX(1,%objTX(0,+r%%CredentialsObj),6)=1 Set M%%CredentialsObj=1,i%%CredentialsObj=$listget(%objTX(1,%objTX(0,+r%%CredentialsObj),1)) }
		set sc=1
	}
	catch tException {
		set sc = tException.AsStatus()
	}
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) public {
	If $data(%objTX(0,+$this)) && ('refresh) Quit 1
	Set sc=1,intOref=+$this
	If refresh,$data(%objTX(0,intOref),index) Set intPoref="" For  Set intPoref=$order(%objTX(1,index,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,%objTX(0,intPoref),3,index),%objTX(1,index,2,%objTX(0,intPoref))
	Set %objTX(0,intOref)=$i(%objTX(1)),%objTX(1,%objTX(1))=$this,%objTX(1,%objTX(1),1)=-1
	Set Poref=r%%CredentialsObj If Poref'="",'$data(%objTX(0,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
	Set Poref=r%%HttpRequest If Poref'="",'$data(%objTX(0,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
	Set Poref=r%BusinessHost If Poref'="",'$data(%objTX(0,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
exit	Quit sc }
%ValidateObject(unused=0,checkserial=1) public {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	If m%%WarnedLatest Set iv=..%WarnedLatest If iv'="" Set rc=(..%WarnedLatestIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%WarnedLatest",iv)
	If m%ConnectTimeout Set iv=..ConnectTimeout If iv'="" Set rc=(..ConnectTimeoutIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"ConnectTimeout",iv)
	If m%Credentials Set iv=..Credentials If iv'="" Set rc=(..CredentialsIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Credentials",iv)
	If m%HTTPPort Set iv=..HTTPPort If iv'="" Set rc=(..HTTPPortIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"HTTPPort",iv)
	Set iv=..HTTPServer If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::HTTPServer("_$this_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%HTTPServer Set rc=(..HTTPServerIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"HTTPServer",iv)
	If m%InseeToken Set iv=..InseeToken If iv'="" Set rc=(..InseeTokenIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"InseeToken",iv)
	If m%KeepaliveInterval Set iv=..KeepaliveInterval If iv'="" Set rc=(..KeepaliveIntervalIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"KeepaliveInterval",iv)
	If m%LocalInterface Set iv=..LocalInterface If iv'="" Set rc=(..LocalInterfaceIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"LocalInterface",iv)
	If m%ProxyHTTPS Set iv=..ProxyHTTPS If iv'="" Set rc=(..ProxyHTTPSIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"ProxyHTTPS",iv)
	If m%ProxyHttpTunnel Set iv=..ProxyHttpTunnel If iv'="" Set rc=(..ProxyHttpTunnelIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"ProxyHttpTunnel",iv)
	If m%ProxyPort Set iv=..ProxyPort If iv'="" Set rc=(..ProxyPortIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"ProxyPort",iv)
	If m%ProxyServer Set iv=..ProxyServer If iv'="" Set rc=(..ProxyServerIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"ProxyServer",iv)
	If m%RegistryID Set iv=..RegistryID If iv'="" Set rc=(..RegistryIDIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"RegistryID",iv)
	Set iv=..ResponseTimeout If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::ResponseTimeout("_$this_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%ResponseTimeout Set rc=(..ResponseTimeoutIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"ResponseTimeout",iv)
	If m%SSLCheckServerIdentity Set iv=..SSLCheckServerIdentity If iv'="" Set rc=(..SSLCheckServerIdentityIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"SSLCheckServerIdentity",iv)
	If m%SSLConfig Set iv=..SSLConfig If iv'="" Set rc=(..SSLConfigIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"SSLConfig",iv)
	If m%SkipBodyAttrs Set iv=..SkipBodyAttrs If iv'="" Set rc=(..SkipBodyAttrsIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"SkipBodyAttrs",iv)
	Set iv=..URL If iv="" Set rc=$$Error^%apiOBJ(5659,$classname()_"::URL("_$this_")"),sc=$select(+sc:rc,1:$$AppendStatus^%occSystem(sc,rc))
	If m%URL Set rc=(..URLIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"URL",iv)
	If m%UseCookies Set iv=..UseCookies If iv'="" Set rc=(..UseCookiesIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"UseCookies",iv)
	If m%WriteTimeout Set iv=..WriteTimeout If iv'="" Set rc=(..WriteTimeoutIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"WriteTimeout",iv)
	Quit sc }
zEvalInitialExpression(pPropName) [ tValue ] public {
	Set $ZT="Trap"
    Set tValue=$Case(pPropName,
                     "%%OID":"",
                     "%Cookies":"",
                     "%CredentialsObj":"",
                     "%HttpRequest":"",
                     "%WarnedLatest":0,
                     "BusinessHost":"",
                     "ConnectTimeout":5,
                     "Credentials":"None",
                     "HTTPPort":"",
                     "HTTPServer":"api.insee.fr",
                     "InseeToken":"",
                     "KeepaliveInterval":0,
                     "LocalInterface":"",
                     "ProxyHTTPS":"",
                     "ProxyHttpTunnel":0,
                     "ProxyPort":"",
                     "ProxyServer":"",
                     "RegistryID":"",
                     "ResponseTimeout":30,
                     "SSLCheckServerIdentity":1,
                     "SSLConfig":"Insee",
                     "SkipBodyAttrs":"*",
                     "URL":"/entreprises/sirene/V3",
                     "UseCookies":0,
                     "WriteTimeout":-1,
                     :"")
Exit
	Quit tValue
Trap
 	Set $ZT="",tValue=""
	Goto Exit }
zGetRenewToken() public {
    Set oSc = 1
    Set result = ""
    //check if token exist
    If ..InseeToken'="" {
        //Revoke
        Set tURL = "/revoke"
        Set tURL = tURL_"?token="_..InseeToken
        Set sc=..PostURL(tURL,.tHttpResponse) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
    }
    Set tURL = "/token"
    Set tURL = tURL_"?grant_type=client_credentials"
    Set sc=..PostURL(tURL,.tHttpResponse) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
    Set result = {}.%FromJSON(tHttpResponse.Data)."access_token"
     Do ##class(Ens.Util.Log).LogInfo($classname(),"GetRenewToken","New token is : "_result)
    Quit result }
zGetSettingRow(pSettingName="",pSourceClass="") public {
	Set tRow = ""
	// Check if the class has been compiled with the new generator
	If (pSourceClass = "Grongier.Insee.Adapter") {
		Set tRow = $case(pSettingName,
			"ConnectTimeout": $LB("ConnectTimeout","Number of seconds to wait on each connection attempt","%Library.Numeric",5,"",0,"","","",0,"Connect Timeout","Connection","Connection Settings",""),
			"Credentials": $LB("Credentials","This is the ID name of the set of credentials values (Username, Password) to be used to access the HTTP server","%Library.String","None",50,"","","","",0,"Credentials","Basic","Basic Settings","credentialsSelector"),
			"HTTPPort": $LB("HTTPPort","TCP Port on the server to send HTTP requests to (will use 80 by default, or 443 if SSLConfig is specified)","%Library.Integer","","",0,65535,"","",0,"HTTP Port","Basic","Basic Settings",""),
			"HTTPServer": $LB("HTTPServer","IP address of the server to send HTTP requests to.","%Library.String","api.insee.fr",1000,"","","","",1,"HTTP Server","Basic","Basic Settings",""),
			"LocalInterface": $LB("LocalInterface","In a multi-homed system, specify which network interface the TCP connection should go through.  An empty value means to use any interface. <br/>"_$char(13,10)_"To be able to bind to IPv6 interfaces you may need to enable IPv6 in your instance.  This is done in the System Management Portal under "_$char(13,10)_"System Administration > Configuration > Additional Settings > Startup, by editing the IPv6 setting.","%Library.String","",250,"","","","",0,"Local Interface","Connection","Connection Settings","selector?context={Ens.ContextSearch/TCPLocalInterfaces}"),
			"ProxyHTTPS": $LB("ProxyHTTPS","Should the proxy (if any) use HTTPS to communicate with the real HTTP/HTTPS server?","%Library.Boolean","","","","","","",0,"Proxy HTTPS","Connection","Connection Settings",""),
			"ProxyHttpTunnel": $LB("ProxyHttpTunnel","Should the Adapter use the HTTP CONNECT command to establish a tunnel through the proxy to the target HTTP server?","%Library.Boolean",0,"","","","","",0,"Proxy HTTP Tunnel","Connection","Connection Settings",""),
			"ProxyPort": $LB("ProxyPort","Proxy server port on which to send HTTP requests, if using a proxy server (will use 8080 by default)","%Library.Integer","","",0,65535,"","",0,"Proxy Port","Connection","Connection Settings",""),
			"ProxyServer": $LB("ProxyServer","Proxy server through which to send HTTP requests, if any","%Library.String","",1000,"","","","",0,"Proxy Server","Connection","Connection Settings",""),
			"RegistryID": $LB("RegistryID","ID of External Service Registry entry<br>"_$char(13,10)_"Leave blank if you are not using the external registry<br>"_$char(13,10)_"This will be used to find values to be applied to the Adapter and Host settings<br>","%Library.String","",260,"","","","",0,"External Registry ID","Basic","Basic Settings","selector?context={Ens.ServiceRegistry.External.ContextSearch/Services?Protocols_1=REST&Protocols_2=HTTP}"),
			"ResponseTimeout": $LB("ResponseTimeout","Timeout for getting a response from the server (the timeout for opening the connection to the server is always 5 seconds). Setting the timeout to -1 means wait forever.","%Library.Numeric",30,"",-1,"","","",1,"Response Timeout","Connection","Connection Settings",""),
			"SSLCheckServerIdentity": $LB("SSLCheckServerIdentity","When making an SSL connection check the server identity in the certificate matches the name of the system we are connecting to."_$char(13,10)_"This defaults to being on and matches based on the rules layed out in section 3.1 of RFC 2818.","%Library.Boolean",1,"","","","","",0,"SSL Check Server Identity","Connection","Connection Settings",""),
			"SSLConfig": $LB("SSLConfig","","%Library.String","Insee",50,"","","","",0,"SSL Configuration","Connection","Connection Settings","sslConfigSelector"),
			"URL": $LB("URL","","%Library.String","/entreprises/sirene/V3",1000,"","","","",1,"URL","Basic","Basic Settings",""),
			"UseCookies": $LB("UseCookies","Save Cookies received in HTTP responses while this adapter is instantiated, and insert them in each subsequent HTTP request.","%Library.Boolean",0,"","","","","",0,"Use Cookies","Additional","Additional Settings",""),
			"WriteTimeout": $LB("WriteTimeout","Set this to the timeout to use when writing to the remote HTTP server.<br>"_$char(13,10)_"The default is -1 means it will wait indefinitely for the remote server to accept the"_$char(13,10)_"written data, change it to another value to specify the timeout in seconds.","%Library.Numeric",-1,"",-1,"","","",0,"Write Timeout","Connection","Connection Settings",""),
			: "")
	}
	Else { // Fall back on getting the data dynamically 
		Set tRow = ..GetDynamicSettingRow(pSettingName,pSourceClass)
	}
	Quit tRow }
zGetURLInsee(pURL,pHttpResponse,pFormVarNames,pData...) public {
    try {
        Set sc=..SendFormDataArray(.pHttpResponse,"GET",..%HttpRequest,.pFormVarNames,.pData,pURL) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
    }
    Catch ex {
        if pHttpResponse.StatusCode = 401 {
            do ..SetRenewToken()
            Set sc=..SendFormDataArray(.pHttpResponse,"GET",..%HttpRequest,.pFormVarNames,.pData,pURL) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
        }
    }
    Quit 1 }
zOnInit() public {
	Set tSC = 1
	Try
	{
		Kill ^insee.debug
        Set tSC = ##class(Grongier.Insee.Utils).CheckSSLConfiguration(..SSLConfig)
        Quit:('tSC)
		Set ..InseeToken = ..GetRenewToken()
        If ..InseeToken=""
		{
			Set tSC = $$Error^%apiOBJ(5001,"Token can't be initial from Insee")
			Quit
		}
        Set ..%HttpRequest=##class(%Net.HttpRequest).%New()
        do ..%HttpRequest.SetHeader("Authorization", "Bearer " _ ..InseeToken)
		Set tSC=##class(EnsLib.HTTP.OutboundAdapter)$this.OnInit()
		Quit:('tSC)
	}
	Catch (oException)
	{
		Set tSC = oException.AsStatus()
	}
	Quit tSC }
zPostURLInsee(pURL,pHttpResponse,pFormVarNames,pData...) public {
    try {
        Set sc=..SendFormDataArray(.pHttpResponse,"POST",..%HttpRequest,.pFormVarNames,.pData,pURL) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
    }
    Catch ex {
        Do ##class(Ens.Util.Log).LogInfo($classname(),"PostURLInsee","In catch")
        if pHttpResponse.StatusCode = 401 {
            do ..SetRenewToken()
            Set sc=..SendFormDataArray(.pHttpResponse,"POST",..%HttpRequest,.pFormVarNames,.pData,pURL) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
        }
    }
    Quit 1 }
zSetRenewToken() public {
    set ..InseeToken = ..GetRenewToken()
    quit 1 }
%HttpRequestNewObject() public {
	Set newobject=##class(%Net.HttpRequest).%New() If newobject="" Quit ""
	Set ..%HttpRequest=newobject
	Quit newobject }
zEnumerateSettingsGetInfo(colinfo,parminfo,idinfo,qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("Name",10,"Name"),$lb("Description",10,"Description"),$lb("Type",10,"Type"),$lb("Default",10,"Default"),$lb("MAXLEN",10,"MAXLEN"),$lb("MINVAL",10,"MINVAL"),$lb("MAXVAL",10,"MAXVAL"),$lb("VALUELIST",10,"VALUELIST"),$lb("DISPLAYLIST",10,"DISPLAYLIST"),$lb("IsRequired",10,"IsRequired"),$lb("LocalizedName",10,"LocalizedName"),$lb("Category",10,"Category"),$lb("LocalizedCategory",10,"LocalizedCategory"),$lb("EditorContext",10,"EditorContext"))
	Set parminfo=""
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb("",$lb($lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("","")))
	}
	Quit 1 }
zEnumerateSettingsGetODBCInfo(colinfo,parminfo,qHandle) public {
	Set metadata=$lb(1,14,"Name",12,50,0,2,"Name","Adapter","Grongier_Insee","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Description",12,50,0,2,"Description","Adapter","Grongier_Insee","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Type",12,50,0,2,"Type","Adapter","Grongier_Insee","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Default",12,50,0,2,"Default","Adapter","Grongier_Insee","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXLEN",12,50,0,2,"MAXLEN","Adapter","Grongier_Insee","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MINVAL",12,50,0,2,"MINVAL","Adapter","Grongier_Insee","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXVAL",12,50,0,2,"MAXVAL","Adapter","Grongier_Insee","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"VALUELIST",12,50,0,2,"VALUELIST","Adapter","Grongier_Insee","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"DISPLAYLIST",12,50,0,2,"DISPLAYLIST","Adapter","Grongier_Insee","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"IsRequired",12,50,0,2,"IsRequired","Adapter","Grongier_Insee","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedName",12,50,0,2,"LocalizedName","Adapter","Grongier_Insee","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Category",12,50,0,2,"Category","Adapter","Grongier_Insee","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedCategory",12,50,0,2,"LocalizedCategory","Adapter","Grongier_Insee","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"EditorContext",12,50,0,2,"EditorContext","Adapter","Grongier_Insee","",$c(0,0,0,0,0,0,0,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	Set colinfo=$li(metadata,2,2+cmdlen)
	Quit 1 }